/*
 * DiABluServerView.java
 *
 * Created on 11 août 2006, 18:22
 */

package citar.diablu.server.view.main;

// J2SE Classes
import java.util.Vector;

// j2se 1.5 - DiABlu System Constants
import static citar.diablu.server.model.settings.DiABluServerCONSTANTS.*;

// i18n & l9n
import java.util.ResourceBundle;

// logger
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.Handler;
import java.util.logging.LogRecord;
import citar.diablu.server.model.log.diABluLogHandler;


// Swing
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JMenuItem;

/*
 * ALL DiABlu Data Classes
 */
import citar.diablu.server.model.data.*;

// model
import citar.diablu.server.controller.out.view.DiABluServerViewModelListener;
// controller
import citar.diablu.server.controller.in.view.DiABluServerViewControllerListener;



/**
 *
 * @author  nrodrigues
 */
public class DiABluServerView extends javax.swing.JFrame implements DiABluServerViewModelListener {
    
    // view constants
    private int COLUMN_UUID = 0;
    private int COLUMN_FNAME = 1;
    private int COLUMN_DEVICE_TYPE = 2;            
    private int COLUMN_STATUS = 3;
    private int COLUMN_LAST_MSG = 4;
    private int COLUMN_LAST_KEYS = 5;
    
    // our controller interface
    private DiABluServerViewControllerListener dController = null;
    
    // Log Detail
    private int logDetail = LOG_SIMPLE;
    private static Logger logger = Logger.getLogger(LOG_MAIN_NAME);
    
    // i18n resource bundle
    private ResourceBundle viewBundle;
    
    /** Creates new form DiABluServerView */
    public DiABluServerView(DiABluServerViewControllerListener dC) {
        
        logger.finest("Starting View...");
        this.dController = dC;
        logger.finest("Starting components...");
        initComponents();
        postInitComponents();
        logger.finest("DiABlu Server View:READY...waiting model...");
        //setVisible(true);
        
        logger.addHandler(new diABluLogHandler(this.log_jta));
        
    }
    
    /**
     *  View Methods
     *  GUI
     *
     */
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        view_bg = new javax.swing.ButtonGroup();
        language_bg = new javax.swing.ButtonGroup();
        location_bg = new javax.swing.ButtonGroup();
        detected_jp = new javax.swing.JPanel();
        detected_jsp = new javax.swing.JScrollPane();
        detectedTable_jt = new javax.swing.JTable();
        filter_jp = new javax.swing.JPanel();
        addBlackList_jb = new javax.swing.JButton();
        removeBlackList_jb = new javax.swing.JButton();
        resetBlackList_jb = new javax.swing.JButton();
        blacklist_jl = new javax.swing.JLabel();
        filterFriendlyNames_jcb = new javax.swing.JCheckBox();
        settings_jp = new javax.swing.JPanel();
        input_jp = new javax.swing.JPanel();
        simulator_jp = new javax.swing.JPanel();
        startStopSimulator_jb = new javax.swing.JButton();
        autoShowSimulator_jcb = new javax.swing.JCheckBox();
        service_jp = new javax.swing.JPanel();
        serviceDescription_jl = new javax.swing.JLabel();
        service_jtf = new javax.swing.JTextField();
        service_jl = new javax.swing.JLabel();
        startStopService_jb = new javax.swing.JButton();
        autoService_jcb = new javax.swing.JCheckBox();
        serviceDescription_jtf = new javax.swing.JTextField();
        discovery_jp = new javax.swing.JPanel();
        vCycles_jl = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        delay_jl = new javax.swing.JLabel();
        fastMode_jcb = new javax.swing.JCheckBox();
        startStopDiscovery_jb = new javax.swing.JButton();
        autoDiscovery_jcb = new javax.swing.JCheckBox();
        vCyclesIN_jftf = new javax.swing.JFormattedTextField();
        vCyclesOUT_jftf = new javax.swing.JFormattedTextField();
        btDelay_jftf = new javax.swing.JFormattedTextField();
        output_jp = new javax.swing.JPanel();
        protocol_jcb = new javax.swing.JComboBox();
        protocol_jl = new javax.swing.JLabel();
        address_jtf = new javax.swing.JTextField();
        adress_jl = new javax.swing.JLabel();
        port_jtf = new javax.swing.JTextField();
        port_jl = new javax.swing.JLabel();
        localhost_jb = new javax.swing.JButton();
        log_jp = new javax.swing.JPanel();
        log_jsp = new javax.swing.JScrollPane();
        log_jta = new javax.swing.JTextArea();
        clearLog_jb = new javax.swing.JButton();
        logDetail_jl = new javax.swing.JLabel();
        logDetail_jcb = new javax.swing.JComboBox();
        menubar_jmb = new javax.swing.JMenuBar();
        global_jm = new javax.swing.JMenu();
        language_jm = new javax.swing.JMenu();
        pt_jrbmi = new javax.swing.JRadioButtonMenuItem();
        en_jrbmi = new javax.swing.JRadioButtonMenuItem();
        location_jm = new javax.swing.JMenu();
        ptl_jmi = new javax.swing.JMenuItem();
        enl_jmi = new javax.swing.JMenuItem();
        view_jm = new javax.swing.JMenu();
        compactView_jmi = new javax.swing.JMenuItem();
        about_jm = new javax.swing.JMenu();
        credits_jmi = new javax.swing.JMenuItem();
        exit_jm = new javax.swing.JMenu();
        exit_jmi = new javax.swing.JMenuItem();
        saveExit_jmi = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DiABlu Server 2 Beta");
        detected_jp.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Detected Devices", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), java.awt.Color.blue));
        detectedTable_jt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UUID  ", "Friendly Name", "Device Type", "Status", "Last Msg", "Last Key"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });

        //detectedTable_jt.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //Ask to be notified of selection changes.
        ListSelectionModel rowSM = detectedTable_jt.getSelectionModel();
        rowSM.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                //Ignore extra messages.
                if (e.getValueIsAdjusting()) return;

                ListSelectionModel lsm =
                (ListSelectionModel)e.getSource();
                if (lsm.isSelectionEmpty()) {

                    //no rows are selected
                    addBlackList_jb.setEnabled(false);
                    removeBlackList_jb.setEnabled(false);

                } else {

                    int selectedRow = lsm.getMinSelectionIndex();
                    String statusT = detectedTable_jt.getValueAt(selectedRow,3).toString();

                    // Black list ENABLE SELECTION
                    // WARNING:This code is prone to error since we must wait for I18N
                    if (statusT.equalsIgnoreCase("BT_Device")){

                        addBlackList_jb.setEnabled(true);
                        removeBlackList_jb.setEnabled(false);

                    } else if (statusT.equalsIgnoreCase("Black_Listed")){

                        addBlackList_jb.setEnabled(false);
                        removeBlackList_jb.setEnabled(true);

                    } else {

                        addBlackList_jb.setEnabled(false);
                        removeBlackList_jb.setEnabled(false);

                    }

                    //selectedRow is selected
                    String uuidT = detectedTable_jt.getValueAt(selectedRow,0).toString();
                    String fName = detectedTable_jt.getValueAt(selectedRow,1).toString();
                    DiABluID dId = new DiABluID(uuidT,fName);
                    dController.newSelectedDevice(dId);

                }
            }
        });
        detected_jsp.setViewportView(detectedTable_jt);

        filter_jp.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter"));
        addBlackList_jb.setText("Add");
        addBlackList_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBlackList_jbActionPerformed(evt);
            }
        });

        removeBlackList_jb.setText("Remove");
        removeBlackList_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBlackList_jbActionPerformed(evt);
            }
        });

        resetBlackList_jb.setText("Reset");
        resetBlackList_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBlackList_jbActionPerformed(evt);
            }
        });

        blacklist_jl.setText("Blacklist:");

        filterFriendlyNames_jcb.setText("Filter devices with Friendly Name not set");
        filterFriendlyNames_jcb.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        filterFriendlyNames_jcb.setMargin(new java.awt.Insets(0, 0, 0, 0));
        filterFriendlyNames_jcb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterFriendlyNames_jcbActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout filter_jpLayout = new org.jdesktop.layout.GroupLayout(filter_jp);
        filter_jp.setLayout(filter_jpLayout);
        filter_jpLayout.setHorizontalGroup(
            filter_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, filter_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(filterFriendlyNames_jcb)
                .add(258, 258, 258)
                .add(blacklist_jl)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(addBlackList_jb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(removeBlackList_jb, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(resetBlackList_jb, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                .addContainerGap())
        );
        filter_jpLayout.setVerticalGroup(
            filter_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(filter_jpLayout.createSequentialGroup()
                .add(filter_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(filterFriendlyNames_jcb)
                    .add(addBlackList_jb)
                    .add(removeBlackList_jb)
                    .add(resetBlackList_jb)
                    .add(blacklist_jl))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout detected_jpLayout = new org.jdesktop.layout.GroupLayout(detected_jp);
        detected_jp.setLayout(detected_jpLayout);
        detected_jpLayout.setHorizontalGroup(
            detected_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, detected_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(detected_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, filter_jp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, detected_jsp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 794, Short.MAX_VALUE))
                .addContainerGap())
        );
        detected_jpLayout.setVerticalGroup(
            detected_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(detected_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(detected_jsp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 128, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(filter_jp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        settings_jp.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Settings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), java.awt.Color.blue));
        input_jp.setBorder(javax.swing.BorderFactory.createTitledBorder("Bluetooth"));
        simulator_jp.setBorder(javax.swing.BorderFactory.createTitledBorder("Simulator"));
        startStopSimulator_jb.setText("Show");
        startStopSimulator_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startStopSimulator_jbActionPerformed(evt);
            }
        });

        autoShowSimulator_jcb.setText("Auto Show");
        autoShowSimulator_jcb.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        autoShowSimulator_jcb.setMargin(new java.awt.Insets(0, 0, 0, 0));
        autoShowSimulator_jcb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoShowSimulator_jcbActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout simulator_jpLayout = new org.jdesktop.layout.GroupLayout(simulator_jp);
        simulator_jp.setLayout(simulator_jpLayout);
        simulator_jpLayout.setHorizontalGroup(
            simulator_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(simulator_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(simulator_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(startStopSimulator_jb, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, autoShowSimulator_jcb))
                .addContainerGap())
        );
        simulator_jpLayout.setVerticalGroup(
            simulator_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(simulator_jpLayout.createSequentialGroup()
                .add(startStopSimulator_jb)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(autoShowSimulator_jcb)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        service_jp.setBorder(javax.swing.BorderFactory.createTitledBorder("Service"));
        serviceDescription_jl.setText("Description:");

        service_jtf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                service_jtfFocusLost(evt);
            }
        });

        service_jl.setText("Name:");

        startStopService_jb.setText("Start");
        startStopService_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startStopService_jbActionPerformed(evt);
            }
        });

        autoService_jcb.setText("Auto Start");
        autoService_jcb.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        autoService_jcb.setMargin(new java.awt.Insets(0, 0, 0, 0));
        autoService_jcb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoService_jcbActionPerformed(evt);
            }
        });

        serviceDescription_jtf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                serviceDescription_jtfFocusLost(evt);
            }
        });

        org.jdesktop.layout.GroupLayout service_jpLayout = new org.jdesktop.layout.GroupLayout(service_jp);
        service_jp.setLayout(service_jpLayout);
        service_jpLayout.setHorizontalGroup(
            service_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(service_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(service_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(startStopService_jb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(autoService_jcb))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(service_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(serviceDescription_jl)
                    .add(service_jl))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(service_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(service_jtf)
                    .add(serviceDescription_jtf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE))
                .addContainerGap())
        );
        service_jpLayout.setVerticalGroup(
            service_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, service_jpLayout.createSequentialGroup()
                .add(service_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(service_jl)
                    .add(startStopService_jb)
                    .add(service_jtf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(service_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(serviceDescription_jl)
                    .add(autoService_jcb)
                    .add(serviceDescription_jtf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(33, 33, 33))
        );

        discovery_jp.setBorder(javax.swing.BorderFactory.createTitledBorder("Discovery"));
        vCycles_jl.setText("Verify Cycles");

        jLabel2.setText("In");

        jLabel1.setText("Out");

        delay_jl.setText("Delay:");

        fastMode_jcb.setText("FAST MODE");
        fastMode_jcb.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        fastMode_jcb.setMargin(new java.awt.Insets(0, 0, 0, 0));
        fastMode_jcb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fastMode_jcbActionPerformed(evt);
            }
        });

        startStopDiscovery_jb.setText("Start");
        startStopDiscovery_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startStopDiscovery_jbActionPerformed(evt);
            }
        });

        autoDiscovery_jcb.setText("Auto Start");
        autoDiscovery_jcb.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        autoDiscovery_jcb.setMargin(new java.awt.Insets(0, 0, 0, 0));
        autoDiscovery_jcb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoDiscovery_jcbActionPerformed(evt);
            }
        });

        vCyclesIN_jftf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                vCyclesIN_jftfFocusLost(evt);
            }
        });

        vCyclesOUT_jftf.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        vCyclesOUT_jftf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                vCyclesOUT_jftfFocusLost(evt);
            }
        });

        btDelay_jftf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                btDelay_jftfFocusLost(evt);
            }
        });

        org.jdesktop.layout.GroupLayout discovery_jpLayout = new org.jdesktop.layout.GroupLayout(discovery_jp);
        discovery_jp.setLayout(discovery_jpLayout);
        discovery_jpLayout.setHorizontalGroup(
            discovery_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(discovery_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(discovery_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(discovery_jpLayout.createSequentialGroup()
                        .add(autoDiscovery_jcb)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(fastMode_jcb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 83, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(delay_jl))
                    .add(discovery_jpLayout.createSequentialGroup()
                        .add(startStopDiscovery_jb)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(vCycles_jl)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(vCyclesIN_jftf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel1)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(discovery_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(btDelay_jftf)
                    .add(vCyclesOUT_jftf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        discovery_jpLayout.setVerticalGroup(
            discovery_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(discovery_jpLayout.createSequentialGroup()
                .add(discovery_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(startStopDiscovery_jb)
                    .add(vCycles_jl)
                    .add(jLabel2)
                    .add(vCyclesIN_jftf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1)
                    .add(vCyclesOUT_jftf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(discovery_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(discovery_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(delay_jl)
                        .add(autoDiscovery_jcb)
                        .add(fastMode_jcb))
                    .add(btDelay_jftf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout input_jpLayout = new org.jdesktop.layout.GroupLayout(input_jp);
        input_jp.setLayout(input_jpLayout);
        input_jpLayout.setHorizontalGroup(
            input_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(input_jpLayout.createSequentialGroup()
                .add(simulator_jp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(discovery_jp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(service_jp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        input_jpLayout.setVerticalGroup(
            input_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, input_jpLayout.createSequentialGroup()
                .add(input_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, service_jp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, discovery_jp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, simulator_jp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        output_jp.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));
        protocol_jcb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "OSC", "FLOSC", "XML" }));
        protocol_jcb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                protocol_jcbActionPerformed(evt);
            }
        });

        protocol_jl.setText("Protocol:");

        address_jtf.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        address_jtf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                address_jtfFocusLost(evt);
            }
        });

        adress_jl.setText("Target Address:");

        port_jtf.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        port_jtf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                port_jtfFocusLost(evt);
            }
        });

        port_jl.setText("Port:");

        localhost_jb.setText("Localhost");
        localhost_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                localhost_jbActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout output_jpLayout = new org.jdesktop.layout.GroupLayout(output_jp);
        output_jp.setLayout(output_jpLayout);
        output_jpLayout.setHorizontalGroup(
            output_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, output_jpLayout.createSequentialGroup()
                .addContainerGap(355, Short.MAX_VALUE)
                .add(protocol_jl)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(protocol_jcb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 66, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(adress_jl)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(address_jtf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 62, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(localhost_jb)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(port_jl)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(port_jtf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        output_jpLayout.setVerticalGroup(
            output_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(output_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(port_jl)
                .add(localhost_jb)
                .add(adress_jl)
                .add(protocol_jcb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(protocol_jl)
                .add(port_jtf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(address_jtf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        org.jdesktop.layout.GroupLayout settings_jpLayout = new org.jdesktop.layout.GroupLayout(settings_jp);
        settings_jp.setLayout(settings_jpLayout);
        settings_jpLayout.setHorizontalGroup(
            settings_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(output_jp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(settings_jpLayout.createSequentialGroup()
                .add(input_jp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        settings_jpLayout.setVerticalGroup(
            settings_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(settings_jpLayout.createSequentialGroup()
                .add(input_jp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(2, 2, 2)
                .add(output_jp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        log_jp.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Log", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), java.awt.Color.blue));
        log_jsp.setAutoscrolls(true);
        log_jta.setColumns(20);
        log_jta.setRows(5);
        log_jsp.setViewportView(log_jta);

        clearLog_jb.setText("Clear ");
        clearLog_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearLog_jbActionPerformed(evt);
            }
        });

        logDetail_jl.setText("Log Detail:");

        logDetail_jcb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ALL", "SEVERE", "WARNING", "CONFIG", "INFO", "FINE", "FINER", "FINEST", "OFF" }));
        logDetail_jcb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logDetail_jcbActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout log_jpLayout = new org.jdesktop.layout.GroupLayout(log_jp);
        log_jp.setLayout(log_jpLayout);
        log_jpLayout.setHorizontalGroup(
            log_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(log_jpLayout.createSequentialGroup()
                .add(log_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(log_jpLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(logDetail_jl)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(logDetail_jcb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 601, Short.MAX_VALUE)
                        .add(clearLog_jb))
                    .add(log_jsp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 804, Short.MAX_VALUE))
                .addContainerGap())
        );
        log_jpLayout.setVerticalGroup(
            log_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, log_jpLayout.createSequentialGroup()
                .add(log_jsp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(log_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(logDetail_jcb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(logDetail_jl)
                    .add(clearLog_jb))
                .addContainerGap())
        );

        global_jm.setText("Global");
        language_jm.setText("Language");
        language_bg.add(pt_jrbmi);
        pt_jrbmi.setText("Portugu\u00eas");
        pt_jrbmi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pt_jrbmiActionPerformed(evt);
            }
        });

        language_jm.add(pt_jrbmi);

        language_bg.add(en_jrbmi);
        en_jrbmi.setSelected(true);
        en_jrbmi.setText("English");
        en_jrbmi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                en_jrbmiActionPerformed(evt);
            }
        });

        language_jm.add(en_jrbmi);

        global_jm.add(language_jm);

        location_jm.setText("Location");
        ptl_jmi.setText("Portugal");
        location_bg.add(ptl_jmi);
        ptl_jmi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ptl_jmiActionPerformed(evt);
            }
        });

        location_jm.add(ptl_jmi);

        enl_jmi.setText("England");
        location_bg.add(enl_jmi);
        enl_jmi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enl_jmiActionPerformed(evt);
            }
        });

        location_jm.add(enl_jmi);

        global_jm.add(location_jm);

        menubar_jmb.add(global_jm);

        view_jm.setText("View");
        compactView_jmi.setText("Compact");
        compactView_jmi.setSelected(true);
        compactView_jmi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compactView_jmiActionPerformed(evt);
            }
        });

        view_jm.add(compactView_jmi);

        menubar_jmb.add(view_jm);

        about_jm.setText("About");
        credits_jmi.setText("About");
        credits_jmi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                credits_jmiActionPerformed(evt);
            }
        });

        about_jm.add(credits_jmi);

        menubar_jmb.add(about_jm);

        exit_jm.setText("Exit");
        exit_jm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit_jmActionPerformed(evt);
            }
        });

        exit_jmi.setText("Exit DiABlu System");
        exit_jmi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit_jmiActionPerformed(evt);
            }
        });

        exit_jm.add(exit_jmi);

        saveExit_jmi.setText("Save & Exit");
        saveExit_jmi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveExit_jmiActionPerformed(evt);
            }
        });

        exit_jm.add(saveExit_jmi);

        menubar_jmb.add(exit_jm);

        setJMenuBar(menubar_jmb);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, detected_jp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, log_jp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, settings_jp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 826, Short.MAX_VALUE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(detected_jp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(settings_jp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(log_jp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void autoShowSimulator_jcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoShowSimulator_jcbActionPerformed
        
        dController.autoSimulator(autoShowSimulator_jcb.isSelected());
        
    }//GEN-LAST:event_autoShowSimulator_jcbActionPerformed

    private void saveExit_jmiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveExit_jmiActionPerformed

        logger.log(Level.FINEST,"[Controller]Saving settings");
        dController.saveSettings();
        logger.finest("Exiting...");
        dController.exit();
        
    }//GEN-LAST:event_saveExit_jmiActionPerformed

    private void fastMode_jcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fastMode_jcbActionPerformed

        boolean fast = fastMode_jcb.isSelected();
        
        dController.setFastMode(fast);
        
        if (fast){
                    delay_jl.setEnabled(false);
                    btDelay_jftf.setEnabled(false);
        } else {
            
            delay_jl.setEnabled(true);
            btDelay_jftf.setEnabled(true);
            
        }
        
    }//GEN-LAST:event_fastMode_jcbActionPerformed

    private void port_jtfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_port_jtfFocusLost

        dController.newPort(port_jtf.getText());
        
    }//GEN-LAST:event_port_jtfFocusLost

    private void address_jtfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_address_jtfFocusLost
       
        dController.newTargetAddress(address_jtf.getText());
        
    }//GEN-LAST:event_address_jtfFocusLost

    private void serviceDescription_jtfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_serviceDescription_jtfFocusLost

        dController.newServiceDescription(serviceDescription_jtf.getText());
        
    }//GEN-LAST:event_serviceDescription_jtfFocusLost

    private void service_jtfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_service_jtfFocusLost

        dController.newServiceName(service_jtf.getText());
        
        
    }//GEN-LAST:event_service_jtfFocusLost

    private void btDelay_jftfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btDelay_jftfFocusLost

        int btd;
        
        btd = Integer.parseInt(btDelay_jftf.getText());
        
        dController.newBluetoothDelay(btd);
        
        
    }//GEN-LAST:event_btDelay_jftfFocusLost

    private void vCyclesOUT_jftfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_vCyclesOUT_jftfFocusLost

        int vout;
        // we assume that everytime we loose focus there's the need to refresh values
        
        
        vout = Integer.parseInt(vCyclesOUT_jftf.getText());
        
        dController.newVerifyCyclesOUT(vout);
        
        
    }//GEN-LAST:event_vCyclesOUT_jftfFocusLost

    private void vCyclesIN_jftfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_vCyclesIN_jftfFocusLost

        int vin;
        // we assume that everytime we loose focus there's the need to refresh values
        
        
        vin = Integer.parseInt(vCyclesIN_jftf.getText());
        
        dController.newVerifyCyclesIN(vin);
        
    }//GEN-LAST:event_vCyclesIN_jftfFocusLost

    private void en_jrbmiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_en_jrbmiActionPerformed

        dController.newLanguage("en");
        
    }//GEN-LAST:event_en_jrbmiActionPerformed

    private void autoService_jcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoService_jcbActionPerformed

        dController.setAutoStartService(autoService_jcb.isSelected());
        
    }//GEN-LAST:event_autoService_jcbActionPerformed

    private void startStopService_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startStopService_jbActionPerformed

        dController.startStopService();
        
    }//GEN-LAST:event_startStopService_jbActionPerformed

    private void startStopDiscovery_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startStopDiscovery_jbActionPerformed

        logger.finest("Start/Stop discovery()");
        dController.startStopDiscovery();
        
    }//GEN-LAST:event_startStopDiscovery_jbActionPerformed

    private void filterFriendlyNames_jcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterFriendlyNames_jcbActionPerformed

        dController.setFilterFriendlyNames(filterFriendlyNames_jcb.isSelected());
        
    }//GEN-LAST:event_filterFriendlyNames_jcbActionPerformed

    private void autoDiscovery_jcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoDiscovery_jcbActionPerformed

        
        dController.setAutoStartDiscovery(autoDiscovery_jcb.isSelected());
        
    }//GEN-LAST:event_autoDiscovery_jcbActionPerformed

    private void localhost_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_localhost_jbActionPerformed

        address_jtf.setText(LOCALHOST);

    }//GEN-LAST:event_localhost_jbActionPerformed

    private void pt_jrbmiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pt_jrbmiActionPerformed

        dController.newLanguage("pt");
        
    }//GEN-LAST:event_pt_jrbmiActionPerformed

    private void ptl_jmiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ptl_jmiActionPerformed
        
        dController.newCountry("PT");
        
    }//GEN-LAST:event_ptl_jmiActionPerformed

    private void enl_jmiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enl_jmiActionPerformed

        dController.newCountry("EN");
        
    }//GEN-LAST:event_enl_jmiActionPerformed

    private void compactView_jmiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compactView_jmiActionPerformed

       dController.setView("Compact");
        
    }//GEN-LAST:event_compactView_jmiActionPerformed

    private void resetBlackList_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBlackList_jbActionPerformed
// TODO add your handling code here:
        dController.clearBlackList();
    }//GEN-LAST:event_resetBlackList_jbActionPerformed

    private void exit_jmiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit_jmiActionPerformed
    
        logger.log(Level.FINEST,"[Controller]Exit the DiABlu System");
        dController.exit();
        
    }//GEN-LAST:event_exit_jmiActionPerformed
 
 /** 
  *  View methods
  *  This are view methods to simplify the collect and conversion of the data
  */
   
    /**
     * This method returns the tablemodel index of the first device found
     * with the given uuid
     *
     */
    public int locateDevice(String targetUUID) {
        
        logger.log(Level.FINEST,"[VIEW|locateDevice()] "+"Target uuid:"+targetUUID);
        int i;                                          // temporary counter                                    
        DefaultTableModel buffer = (DefaultTableModel) detectedTable_jt.getModel();    // our current data table        
        String tempUUID = "";                               // temporary uuid used to compare
        int top = buffer.getRowCount();                     // total of table rows
        
        // Check for an empty model
        if (top==0) return -1;
                    
        // get the first element
        //tempUUID = buffer.getValueAt(i,0).toString();
        
        // do a cicle until we find our target
        for (i=0;i<top;i++){
            tempUUID = buffer.getValueAt(i,0).toString();
            if (tempUUID.equalsIgnoreCase(targetUUID)) break;
        }
        
        //check our results
        if (i==top) {
            
            // element not found
            logger.log(Level.FINEST,"[VIEW-locateDevice()]Device:"+targetUUID+"not found");
            return -1;
        } else {
            
            // we've found a match, let's return the index
            logger.log(Level.FINEST,"[VIEW-locateDevice()]Device:"+targetUUID+"found at index:"+i);
            return i;
        }
        
    }   
    
    
    private void addDevice(DiABluDevice dd){
        
        logger.log(Level.FINEST,"[View]Adding device:"+dd.toString());
        
        // get the info on the device
        String uuidT = dd.getID().getUUID();
        String fnameT = dd.getID().getFName();
        String deviceT = dd.getStringDevice();
        String statusT = dd.getStringStatus();
                        
        logger.log(Level.FINEST,"[VIEW-addDevice()]FNAME:"+fnameT+"@"+uuidT+"|["+deviceT+"]"+"|>"+statusT);
        DefaultTableModel modelT = (DefaultTableModel) detectedTable_jt.getModel();
        
        modelT.addRow(new Object[] { uuidT, fnameT, deviceT, statusT, "", "" });
    
        detectedTable_jt.setModel( (TableModel) modelT ); 
        
    }
    
    private void editDevice(DiABluDevice dd){
        
        logger.log(Level.FINEST,"[View]Editing device:"+dd.toString());
        logger.log(Level.FINEST,"Locating device:"+dd.toString());
        
      
        int locatedRow = locateDevice(dd.getID().getUUID());
        
        // make sure i've got work to do'
        if (locatedRow!=-1) {
           
           logger.log(Level.FINEST,"Device located @"+locatedRow);
           // get the Device's info'
           Object fname0 = (Object) dd.getID().getFName();
           Object dtype0 = (Object) dd.getStringDevice();
           Object status0 = (Object) dd.getStringStatus();
           Object lastm0 = (Object) dd.getLastMessage();
           Object lastk0 = (Object) dd.getLastKey();
                    
           // get & set the current tablemodel
           DefaultTableModel currentTable = (DefaultTableModel) detectedTable_jt.getModel();
           currentTable.setValueAt(fname0,locatedRow,COLUMN_FNAME);
           currentTable.setValueAt(dtype0,locatedRow,COLUMN_DEVICE_TYPE);
           currentTable.setValueAt(status0,locatedRow,COLUMN_STATUS);
           currentTable.setValueAt(lastm0,locatedRow,COLUMN_LAST_MSG);
           currentTable.setValueAt(lastk0,locatedRow,COLUMN_LAST_KEYS);
           
           // update the table
           detectedTable_jt.setModel( (TableModel) currentTable );  
           
           return;
        }
        logger.log(Level.FINEST,"Device not locatized!");
        
        
        
    }
    
    private void removeDevice(DiABluID dd){
        
        logger.log(Level.FINEST,"[View]Removing device:"+dd.toString());
       
     
        DefaultTableModel currentTable = (DefaultTableModel)          // get our current data table
                                         detectedTable_jt.getModel();  
        
        int locatedRow = locateDevice(dd.getUUID());
            
        // if We've found a match let's remove the device            
        if (locatedRow!=-1) {
                
                logger.log(Level.FINEST,"[View]Found device @"+locatedRow); 
                // remove the row
                currentTable.removeRow(locatedRow);    
                // update the table
                detectedTable_jt.setModel( (TableModel) currentTable );
                
          } else {
            
             logger.log(Level.FINEST,"Couldn't remove:"+dd.toString());
            
          }
      
    }
    
    private int locateDevice(DiABluID dId){
        
        logger.log(Level.FINEST,"Trying to locate:"+dId.toString());
        logger.log(Level.FINEST,"[View]Code in progress");
        return 0;
        
    }
    
    /**
     *  This method returns the selected device ID
     *
     */
    private DiABluID getSelectedDiABluID(){
        
         // get our table data
         int selectedRow = detectedTable_jt.getSelectedRow();
         // no row selected   
         if (selectedRow == -1){
             
             logger.log(Level.WARNING,"You have to select a device first");
             return new DiABluID();
             
         }
         
         String uuidT = detectedTable_jt.getValueAt(selectedRow,0).toString();
         String fnameT = detectedTable_jt.getValueAt(selectedRow,1).toString();
         
         // construct the DiABluID
         DiABluID did = new DiABluID(uuidT,fnameT);
         
         return did;
         
    }

    /**
     *  This method returns an String with the selected 
     *  device's uuid
     *
     */
    private String getSelectedDiABluUUID(){
        
         // get our table data
         int selectedRow = detectedTable_jt.getSelectedRow();
         // no row selected   
         if (selectedRow == -1){
             
             logger.log(Level.WARNING,"You have to select a device first");
             return "";
             
         }
         
         String uuidT = detectedTable_jt.getValueAt(selectedRow,0).toString();
         logger.finest("Selected UUID:"+uuidT);
         
         return uuidT;
    
        
    }
    
    
    /*
     * Controller Methods
     * These methods are called by the View section in order to fire the appropriatte forward action
     */
    private void removeBlackList_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBlackList_jbActionPerformed

        String dId = getSelectedDiABluUUID();
        if (!dId.equalsIgnoreCase("")) {
            
            logger.finest("Selected uuid:"+dId);
            dController.removeFromBlackList(dId);
            removeBlackList_jb.setEnabled(false);
            addBlackList_jb.setEnabled(true);
        
        }
        
    }//GEN-LAST:event_removeBlackList_jbActionPerformed

    private void addBlackList_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBlackList_jbActionPerformed


        String dId = getSelectedDiABluUUID();

        // paranoid check
        if (!dId.equalsIgnoreCase("")) {
            
            logger.log(Level.FINEST,"Selected uuid:"+dId);
            dController.addToBlackList(dId);
            addBlackList_jb.setEnabled(false);
            removeBlackList_jb.setEnabled(true);
        
        }
        
    }//GEN-LAST:event_addBlackList_jbActionPerformed

    private void logDetail_jcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logDetail_jcbActionPerformed

        
        String logD = logDetail_jcb.getSelectedItem().toString();
                
        dController.newLogLevel(logD);                  
        
        // debug log
        logger.log(Level.FINEST,"[Controller]New Log Detail code:"+logDetail);   
                      
    }//GEN-LAST:event_logDetail_jcbActionPerformed

    public void setLogLevel(Level newLevel){
        
        logger.setLevel(newLevel);
        
    }
    
    public Level getLogLevel(){
        
        return logger.getLevel();
                
    }
    
    private void protocol_jcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_protocol_jcbActionPerformed
          // TODO: in next version :)
        String p = protocol_jcb.getSelectedItem().toString();
        dController.newProtocol(p);
        
        
    }//GEN-LAST:event_protocol_jcbActionPerformed

    private void startStopSimulator_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startStopSimulator_jbActionPerformed

        logger.log(Level.FINEST,"[Controller]Start/Stop Simulator");
        dController.startStopSimulator();
                
    }//GEN-LAST:event_startStopSimulator_jbActionPerformed

    private void clearLog_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearLog_jbActionPerformed
        
        dController.clearLog();
        logger.log(Level.FINEST,"[Controller]Clear Log");
        
    }//GEN-LAST:event_clearLog_jbActionPerformed

    private void exit_jmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit_jmActionPerformed

        logger.log(Level.FINEST,"[Controller]Exit the DiABlu System");
        dController.exit();
        
    }//GEN-LAST:event_exit_jmActionPerformed

    private void credits_jmiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_credits_jmiActionPerformed
        
        logger.log(Level.FINEST,"[Controller]Show Credits");
        dController.showCredits();

    }//GEN-LAST:event_credits_jmiActionPerformed
    
  
    
    /*
     * DiABlu Server Model Listener Interface Methods
     *
     */

    public void setVisibleView(boolean vis){
        
        this.setVisible(vis);
        
    }
    
    /* 
     * Detected table methods
     * 
     */  

    /**
     *  This method receives a list of DiABlu Devices
     *  to add all to the detected table
     *
     *
     */     
    public void newDiABluDevices (Vector <DiABluDevice> dbList){
    
        // Paranoid check:        
        if (dbList == null) {
            
            logger.log(Level.FINEST,"[View]Trying to add a null list!");
            return;
        }
                
        dController.log(LOG_DETAILED,"[View]Adding "+dbList.size()+" devices");
        
        for (DiABluDevice iterator:dbList){
              addDevice(iterator);            
        }
       
    }
    
    public void editDiABluDevices (Vector <DiABluDevice> dbList){
    
        // Paranoid check:        
        if (dbList == null) {
            
            logger.log(Level.FINEST,"[View]Trying to edit a null list!");
            return;
        }
                
        dController.log(LOG_DETAILED,"[View]Editing "+dbList.size()+" devices");   
        
        for (DiABluDevice iterator:dbList){
              editDevice(iterator);            
        }
      
    }
    
    public void removeDiABluDevices (Vector <DiABluDevice> dbList){
    
       
        // Paranoid check:        
        if (dbList == null) {
            
            logger.log(Level.FINEST,"[View]Trying to remove a null list!");
            return;
        }
                
        dController.log(LOG_DETAILED,"[View]Removing "+dbList.size()+" devices");
        
        for (DiABluDevice iterator2:dbList){
            
              removeDevice(iterator2.getID());   
              
        }
        
        
    }
   
    /**
     *  This method removes all current elements of the detected devices table
     *  and replaces them with the new arrived list if not empty
     *
     *
     */
   public void resetDeviceList(Vector <DiABluDevice> ddList){              
       
       // first we clean up 
      DefaultTableModel buffer = (DefaultTableModel) detectedTable_jt.getModel();    // our current data table
      int bufferSize = buffer.getRowCount();
      
      for (int i=0;i<bufferSize;i++){
          
          buffer.removeRow(0);
          
      }
      
      detectedTable_jt.setModel((TableModel) buffer);
                     
   }

    
    public void newMsg (DiABluMsg newMsg){
    
        DiABluID dId = newMsg.getID();
        dController.log(LOG_DETAILED,"[View]New Msg:"+newMsg.getText()+"|From:"+dId.toString());
        
        // locate & update
        int index = locateDevice(dId);        
        if (index !=-1) {
            
            // we've found the device let's update the table model'
            DefaultTableModel buffer = (DefaultTableModel) detectedTable_jt.getModel();    // our current data table
            buffer.setValueAt(newMsg.getText(),index,4);
            
            // update the table
            detectedTable_jt.setModel( (TableModel) buffer );                                                                        
            return;
        }
        logger.log(Level.FINEST,"No device found for this msg");
        
        
    }
    
    public void newKey (DiABluKey newKey){
    
        DiABluID dId = newKey.getID();
        String keyText = newKey.toString();
        
        dController.log(LOG_DETAILED,"[View]New Key:"+keyText+"|From:"+dId.toString());
        
        int index = locateDevice(dId);
        if (index !=-1) {
            
            // we've found the device let's update the table model'
            DefaultTableModel buffer = (DefaultTableModel) detectedTable_jt.getModel();    // our current data table
            buffer.setValueAt(keyText,index,5);
            
            // update the table
            detectedTable_jt.setModel( (TableModel) buffer );
            return;
            
        }                
        logger.log(Level.FINEST,"No device found for this keys");
        
    }
    
    /* 
     * Settings
     */
    
    // Global
    public void setResourceBundle(ResourceBundle rb){
        
        this.viewBundle = rb;
        
    }       
    
    /**
     * This method sets the selected country in the location menu
     * It's dynamic, first get's the menu and searches for the given country
     * and selects it and unselects the others.
     *
     * NOTE:If you send a non-existent country this method will unselect all
     */
    public void setCountry(String country){
       
       // get the total locations avaiable
       int totalCountry = location_jm.getItemCount(); 
       JMenuItem jrbmi;
       
       // search, compare, (un)select each menu item
       for (int i=0;i<totalCountry;i++) {
         
           jrbmi = (JMenuItem)location_jm.getItem(i);
           if (jrbmi.getText().equalsIgnoreCase(country)){
               
               if (!jrbmi.isSelected()) jrbmi.setSelected(true);
               
           } else {
               
               jrbmi.setSelected(false);
               
           }
           
       }
           
         
        
    }
    
    /**
     * This method does exactly the same thing as the setLocation
     * except this does it for the language option
     *
     *
     */
    public void setLanguage(String language){
                   
       // get the total languages avaiable
       int totalLanguages = language_jm.getItemCount(); 
       JRadioButtonMenuItem jrbmi;
       
       // search, compare, (un)select each menu item
       for (int i=0;i<totalLanguages;i++) {
         
           jrbmi = (JRadioButtonMenuItem)language_jm.getItem(i);
           if (jrbmi.getText().equalsIgnoreCase(language)){
               
               if (!jrbmi.isSelected()) jrbmi.setSelected(true);
               
           } else {
               
               jrbmi.setSelected(false);
               
           }
           
       }  
        
    }
    // Input
    // TODO:Multiple Protocol
    
    // Protocol Bluetooth
    public void setServiceName(String newServiceName){
        
        if (!this.service_jtf.getText().equalsIgnoreCase(newServiceName)){
    
            this.service_jtf.setText(newServiceName);
            
        }
        
    }
    
    public void setServiceDescription(String newServiceDesc){
    
        if (!this.serviceDescription_jtf.getText().equalsIgnoreCase(newServiceDesc)){
        
            this.serviceDescription_jtf.setText(newServiceDesc);
            
        }
        
        
    }
    
    public void setBluetoothDelay(int delay){
    
        String btDelay = Integer.toString(delay);
        if (!this.btDelay_jftf.getText().equalsIgnoreCase(btDelay)){
        
            this.btDelay_jftf.setText(btDelay);
            
        }
                
    }
    
    public void setAutoDiscovery(boolean autoD){
        
        logger.finest("Setting AUTO Discovery?:"+autoD);
        autoDiscovery_jcb.setSelected(autoD);
        
    }
    
    public void setVCyclesIN(int vCin){
        
        vCyclesIN_jftf.setText(Integer.toString(vCin));
        
    }
    
    public void setVCyclesOUT(int vCout){
        
        vCyclesOUT_jftf.setText(Integer.toString(vCout));
        
    }
    
    
    public void setAutoService(boolean autoS){
    
        autoService_jcb.setSelected(autoS);
        
    }
    
    public void setFastMode(boolean fastM){
        
        fastMode_jcb.setSelected(fastM);
        
    }
    
    public void setFilterFNames(boolean filterFN){
        
        logger.finest("Setting filter:"+filterFN);
        filterFriendlyNames_jcb.setSelected(filterFN);
        
    }
    
    public void setDiscoveryStatus(boolean started){
           
            logger.finest("Discovery STATUS?:"+started);
            
            if (started){
            startStopDiscovery_jb.setText("Stop");
            } else {
            startStopDiscovery_jb.setText("Start");
            }
     
    }
    
    public void setServiceStatus(boolean started){
        
 
        logger.finest("Service started?:"+started);
        if (started){
           startStopService_jb.setText("Stop");
        } else {
             startStopService_jb.setText("Start");
        }
        
    }
    
    public void setSimulatorStatus(boolean started){
            
        logger.finest("Simulator visible?:"+started);
        if (started){
        
            startStopSimulator_jb.setText("Hide");                    
        
        } else {
        
            startStopSimulator_jb.setText("Show");
        
        }
        
        
        
    }
    
    public void setProtocol(String prot){
        
        // TODO:update the combo box
        
        
        
    }
    
    // Output
    // Protocol OpenSoundControl
    public void setTargetAddress(String targetURL){
        
       logger.finest("Setting view targetAddress:"+targetURL); 
       if (!this.address_jtf.getText().equalsIgnoreCase(targetURL)){
            
            this.address_jtf.setText(targetURL);
            
        }
    
    }
    
    public void setTargetPort(String targetPort){
       
       logger.finest("Setting view's targetPort:"+targetPort);
       if (!this.port_jtf.getText().equalsIgnoreCase(targetPort)){
           
           this.port_jtf.setText(targetPort);
           
       }     
        
    }
    
    
    /** 
     * DEPRECATED - using java logging API
     * Log
     *
     * For the time being we discard priority, but in future
     * we can use this value in order to give diferent appearance
     * to each, example: error messages in red.
     *
     */ 
    public void log(int priority,String log){
    
        logger.warning("Using log deprecated method:"+log);
        // Check if this log is getting to big
        // TODO:Put a check for a configurable maximum size instead of this 1000
        // logger.finest("VIEW["+priority+"]:"+log);
        
        if (log_jta.getLineCount()>1000){
            log_jta.setText("");
        } 
    
        log_jta.append(log+"\n");
        
    }
    
    public void setLogDetail(int priority){
               
        String logDetail;
        
        // Paranoid check
        // TODO:Pass this validation to the model
        if ( priority > 2 ) { priority = 2; }
        
        if ( this.logDetail_jcb.getSelectedIndex() != priority ){
            
            logDetail_jcb.setSelectedIndex(priority);
            
        }
        
    }
    
    public void clearLog(){
    
        this.log_jta.setText("");
    
    }
    
    /*
     * Selected Device
     * Simulator 
     * This method is used only to update the simulator's view but could be used for a more complex view,etc
     */
    public void setSelectedDevice(DiABluID dd){
    
        // NOTHING TO DO HERE
    
    }
   
    public void setSimulatorAuto(boolean auto){                  
        
        autoShowSimulator_jcb.setSelected(auto);
        
    }
    
    public void simulatorIsRunning(boolean status){
        
        logger.finest("[view - simulatorIsRunning]:"+status);
        if (status){
            
            startStopSimulator_jb.setText("Hide");
            
            
        } else {
            
            startStopSimulator_jb.setText("Show");
            
        }
    }
    
    private void postInitComponents(){
        
        // black list buttons
        addBlackList_jb.setEnabled(false);
        removeBlackList_jb.setEnabled(false);       
        
        // detected table size
        detectedTable_jt.getColumnModel().getColumn(0).setPreferredWidth(80);
        detectedTable_jt.getColumnModel().getColumn(1).setPreferredWidth(400);
        detectedTable_jt.getColumnModel().getColumn(2).setPreferredWidth(100);
        detectedTable_jt.getColumnModel().getColumn(3).setPreferredWidth(80);
        // TODO
        
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu about_jm;
    private javax.swing.JButton addBlackList_jb;
    private javax.swing.JTextField address_jtf;
    private javax.swing.JLabel adress_jl;
    private javax.swing.JCheckBox autoDiscovery_jcb;
    private javax.swing.JCheckBox autoService_jcb;
    private javax.swing.JCheckBox autoShowSimulator_jcb;
    private javax.swing.JLabel blacklist_jl;
    private javax.swing.JFormattedTextField btDelay_jftf;
    private javax.swing.JButton clearLog_jb;
    private javax.swing.JMenuItem compactView_jmi;
    private javax.swing.JMenuItem credits_jmi;
    private javax.swing.JLabel delay_jl;
    private javax.swing.JTable detectedTable_jt;
    private javax.swing.JPanel detected_jp;
    private javax.swing.JScrollPane detected_jsp;
    private javax.swing.JPanel discovery_jp;
    private javax.swing.JRadioButtonMenuItem en_jrbmi;
    private javax.swing.JMenuItem enl_jmi;
    private javax.swing.JMenu exit_jm;
    private javax.swing.JMenuItem exit_jmi;
    private javax.swing.JCheckBox fastMode_jcb;
    private javax.swing.JCheckBox filterFriendlyNames_jcb;
    private javax.swing.JPanel filter_jp;
    private javax.swing.JMenu global_jm;
    private javax.swing.JPanel input_jp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.ButtonGroup language_bg;
    private javax.swing.JMenu language_jm;
    private javax.swing.JButton localhost_jb;
    private javax.swing.ButtonGroup location_bg;
    private javax.swing.JMenu location_jm;
    private javax.swing.JComboBox logDetail_jcb;
    private javax.swing.JLabel logDetail_jl;
    private javax.swing.JPanel log_jp;
    private javax.swing.JScrollPane log_jsp;
    private javax.swing.JTextArea log_jta;
    private javax.swing.JMenuBar menubar_jmb;
    private javax.swing.JPanel output_jp;
    private javax.swing.JLabel port_jl;
    private javax.swing.JTextField port_jtf;
    private javax.swing.JComboBox protocol_jcb;
    private javax.swing.JLabel protocol_jl;
    private javax.swing.JRadioButtonMenuItem pt_jrbmi;
    private javax.swing.JMenuItem ptl_jmi;
    private javax.swing.JButton removeBlackList_jb;
    private javax.swing.JButton resetBlackList_jb;
    private javax.swing.JMenuItem saveExit_jmi;
    private javax.swing.JLabel serviceDescription_jl;
    public javax.swing.JTextField serviceDescription_jtf;
    private javax.swing.JLabel service_jl;
    private javax.swing.JPanel service_jp;
    private javax.swing.JTextField service_jtf;
    private javax.swing.JPanel settings_jp;
    private javax.swing.JPanel simulator_jp;
    private javax.swing.JButton startStopDiscovery_jb;
    private javax.swing.JButton startStopService_jb;
    private javax.swing.JButton startStopSimulator_jb;
    private javax.swing.JFormattedTextField vCyclesIN_jftf;
    private javax.swing.JFormattedTextField vCyclesOUT_jftf;
    private javax.swing.JLabel vCycles_jl;
    private javax.swing.ButtonGroup view_bg;
    private javax.swing.JMenu view_jm;
    // End of variables declaration//GEN-END:variables
    
}
