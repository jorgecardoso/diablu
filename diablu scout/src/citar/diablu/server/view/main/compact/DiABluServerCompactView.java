/*
 * DiABluServerCompactView.java
 *
 * Created on 30 de Agosto de 2006, 1:53
 */

package citar.diablu.server.view.main.compact;

// J2SE Classes
import java.util.Vector;

// j2se 1.5 - DiABlu System Constants
import static citar.diablu.server.model.settings.DiABluServerCONSTANTS.*;

/*
 * ALL DiABlu Data Classes
 */
import citar.diablu.server.model.data.*;

// i18n & l9n
import java.util.ResourceBundle;

// Swing
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;

// model
import citar.diablu.server.controller.out.view.DiABluServerViewModelListener;

// controller
import citar.diablu.server.controller.in.view.DiABluServerViewControllerListener;

/**
 *
 * @author  Nuno Rodrigues
 */
public class DiABluServerCompactView extends javax.swing.JFrame {
    
    // our controller interface
    private DiABluServerViewControllerListener dController = null;
    
    // Log Detail
    private int logDetail = LOG_SIMPLE;
    
    // i18n resource bundle
    ResourceBundle viewBundle;
    
    /** Creates new form DiABluServerCompactView */
    public DiABluServerCompactView(DiABluServerViewControllerListener dC) {
        
        this.dController = dC;
        initComponents();
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        AllPane = new javax.swing.JTabbedPane();
        detected_jp = new javax.swing.JPanel();
        detected_jsp = new javax.swing.JScrollPane();
        detectedTable_jt = new javax.swing.JTable();
        settings_jp = new javax.swing.JPanel();
        serviceDescription_jtf = new javax.swing.JTextField();
        serviceDescription_jl = new javax.swing.JLabel();
        service_jtf = new javax.swing.JTextField();
        service_jl = new javax.swing.JLabel();
        vCycles_jl = new javax.swing.JLabel();
        vCycles_jtf = new javax.swing.JTextField();
        delay_jl = new javax.swing.JLabel();
        delay_jtf = new javax.swing.JTextField();
        output_jp = new javax.swing.JPanel();
        address_jtf = new javax.swing.JTextField();
        adress_jl = new javax.swing.JLabel();
        port_jtf = new javax.swing.JTextField();
        port_jl = new javax.swing.JLabel();
        log_jp = new javax.swing.JPanel();
        log_jsp = new javax.swing.JScrollPane();
        log_jta = new javax.swing.JTextArea();
        clearLog_jb = new javax.swing.JButton();
        saveLog_jb = new javax.swing.JButton();
        logDetail_jl = new javax.swing.JLabel();
        logDetail_jcb = new javax.swing.JComboBox();
        menubar_jmb = new javax.swing.JMenuBar();
        settings_jm = new javax.swing.JMenu();
        loadSettings_jmi = new javax.swing.JMenuItem();
        saveSettings_jmi = new javax.swing.JMenuItem();
        language_jm = new javax.swing.JMenu();
        languagePT_jmi = new javax.swing.JMenuItem();
        languageFR_jmi = new javax.swing.JMenuItem();
        languageEN_jmi = new javax.swing.JMenuItem();
        location_jm = new javax.swing.JMenu();
        locationPT_jmi = new javax.swing.JMenuItem();
        locationFR_jmi = new javax.swing.JMenuItem();
        locationEN_jmi = new javax.swing.JMenuItem();
        blackList_jm = new javax.swing.JMenu();
        addBlackList_jmi = new javax.swing.JMenuItem();
        removeBlackList_jmi = new javax.swing.JMenuItem();
        resetBlackList_jmi = new javax.swing.JMenuItem();
        exit_jm = new javax.swing.JMenu();
        exit_jmi = new javax.swing.JMenuItem();
        credits_jm = new javax.swing.JMenu();
        credits_jmi = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        detected_jp.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        detected_jsp.setName(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("DetectedTab"));
        detectedTable_jt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("UUID__"), java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Friendly_Name"), java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Device_Type"), java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Status"), java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Last_Msg"), java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Last_Key")
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        detectedTable_jt.getColumnModel().getColumn(0).setPreferredWidth(310);
        detectedTable_jt.getColumnModel().getColumn(1).setPreferredWidth(400);
        detectedTable_jt.getColumnModel().getColumn(2).setPreferredWidth(80);
        detectedTable_jt.getColumnModel().getColumn(3).setPreferredWidth(120);
        //detectedTable_jt.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //Ask to be notified of selection changes.
        ListSelectionModel rowSM = detectedTable_jt.getSelectionModel();
        rowSM.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                //Ignore extra messages.
                if (e.getValueIsAdjusting()) return;

                ListSelectionModel lsm =
                (ListSelectionModel)e.getSource();
                if (lsm.isSelectionEmpty()) {
                    //no rows are selected
                } else {
                    int selectedRow = lsm.getMinSelectionIndex();

                    //selectedRow is selected
                    String uuidT = detectedTable_jt.getValueAt(selectedRow,0).toString();
                    String fName = detectedTable_jt.getValueAt(selectedRow,1).toString();
                    DiABluID dId = new DiABluID(uuidT,fName);
                    dController.newSelectedDevice(dId);

                }
            }
        });
        detected_jsp.setViewportView(detectedTable_jt);

        org.jdesktop.layout.GroupLayout detected_jpLayout = new org.jdesktop.layout.GroupLayout(detected_jp);
        detected_jp.setLayout(detected_jpLayout);
        detected_jpLayout.setHorizontalGroup(
            detected_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(detected_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(detected_jsp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 668, Short.MAX_VALUE)
                .addContainerGap())
        );
        detected_jpLayout.setVerticalGroup(
            detected_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(detected_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(detected_jsp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                .addContainerGap())
        );
        AllPane.addTab(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Detection"), detected_jp);

        serviceDescription_jtf.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("DiABlu_System_is_in_tha_house_:P"));
        serviceDescription_jtf.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                serviceDescription_jtfPropertyChange(evt);
            }
        });

        serviceDescription_jl.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Service_Description:"));

        service_jtf.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("DiABlu666"));
        service_jtf.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                service_jtfPropertyChange(evt);
            }
        });

        service_jl.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Service_Name:"));

        vCycles_jl.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Verify_inquirys_before_device_removal:"));

        vCycles_jtf.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        vCycles_jtf.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("2"));

        delay_jl.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Delay_between_bluetooth_discoverys(ms):"));

        delay_jtf.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        delay_jtf.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("10000"));
        delay_jtf.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                delay_jtfPropertyChange(evt);
            }
        });

        org.jdesktop.layout.GroupLayout settings_jpLayout = new org.jdesktop.layout.GroupLayout(settings_jp);
        settings_jp.setLayout(settings_jpLayout);
        settings_jpLayout.setHorizontalGroup(
            settings_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(settings_jpLayout.createSequentialGroup()
                .add(settings_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(settings_jpLayout.createSequentialGroup()
                        .add(115, 115, 115)
                        .add(serviceDescription_jl)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(serviceDescription_jtf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, settings_jpLayout.createSequentialGroup()
                        .add(141, 141, 141)
                        .add(service_jl)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(service_jtf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE))
                    .add(settings_jpLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(settings_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(delay_jl)
                            .add(vCycles_jl))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(settings_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(vCycles_jtf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(delay_jtf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 46, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        settings_jpLayout.setVerticalGroup(
            settings_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(settings_jpLayout.createSequentialGroup()
                .add(23, 23, 23)
                .add(settings_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(delay_jl)
                    .add(delay_jtf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(settings_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(vCycles_jtf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(vCycles_jl))
                .add(37, 37, 37)
                .add(settings_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(service_jtf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(service_jl))
                .add(21, 21, 21)
                .add(settings_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(serviceDescription_jl)
                    .add(serviceDescription_jtf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 55, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        AllPane.addTab(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Bluetooth"), settings_jp);

        address_jtf.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        address_jtf.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("127.0.0.1"));
        address_jtf.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                address_jtfPropertyChange(evt);
            }
        });

        adress_jl.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Target_Address:"));

        port_jtf.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        port_jtf.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("10000"));
        port_jtf.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                port_jtfPropertyChange(evt);
            }
        });

        port_jl.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Port:"));

        org.jdesktop.layout.GroupLayout output_jpLayout = new org.jdesktop.layout.GroupLayout(output_jp);
        output_jp.setLayout(output_jpLayout);
        output_jpLayout.setHorizontalGroup(
            output_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(output_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(output_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(port_jl)
                    .add(adress_jl))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(output_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(address_jtf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(port_jtf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(544, Short.MAX_VALUE))
        );
        output_jpLayout.setVerticalGroup(
            output_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(output_jpLayout.createSequentialGroup()
                .add(29, 29, 29)
                .add(output_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(adress_jl)
                    .add(address_jtf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(output_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(port_jl)
                    .add(port_jtf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(146, Short.MAX_VALUE))
        );
        AllPane.addTab(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Open_Sound_Control"), output_jp);

        log_jta.setColumns(20);
        log_jta.setRows(5);
        log_jsp.setViewportView(log_jta);

        clearLog_jb.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Clear_"));
        clearLog_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearLog_jbActionPerformed(evt);
            }
        });

        saveLog_jb.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Save"));
        saveLog_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveLog_jbActionPerformed(evt);
            }
        });

        logDetail_jl.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Log_Detail:"));

        logDetail_jcb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Simple"), java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Detailed"), java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Debug") }));
        logDetail_jcb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logDetail_jcbActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout log_jpLayout = new org.jdesktop.layout.GroupLayout(log_jp);
        log_jp.setLayout(log_jpLayout);
        log_jpLayout.setHorizontalGroup(
            log_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(log_jpLayout.createSequentialGroup()
                .add(log_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(log_jpLayout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(logDetail_jl)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(logDetail_jcb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 414, Short.MAX_VALUE)
                        .add(clearLog_jb)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(saveLog_jb))
                    .add(log_jpLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(log_jsp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 670, Short.MAX_VALUE)))
                .addContainerGap())
        );
        log_jpLayout.setVerticalGroup(
            log_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, log_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(log_jsp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 160, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 16, Short.MAX_VALUE)
                .add(log_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(log_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(saveLog_jb)
                        .add(clearLog_jb))
                    .add(log_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(logDetail_jl)
                        .add(logDetail_jcb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        AllPane.addTab(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Log"), log_jp);

        AllPane.getAccessibleContext().setAccessibleName(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Settings"));

        settings_jm.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Settings"));
        loadSettings_jmi.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Load_Settings"));
        settings_jm.add(loadSettings_jmi);

        saveSettings_jmi.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Save_settings"));
        settings_jm.add(saveSettings_jmi);

        language_jm.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Language"));
        languagePT_jmi.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Portugu\u00eas"));
        language_jm.add(languagePT_jmi);

        languageFR_jmi.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Fran\u00e7ais"));
        language_jm.add(languageFR_jmi);

        languageEN_jmi.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("English"));
        language_jm.add(languageEN_jmi);

        settings_jm.add(language_jm);

        location_jm.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Menu"));
        locationPT_jmi.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Item"));
        location_jm.add(locationPT_jmi);

        locationFR_jmi.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Item"));
        location_jm.add(locationFR_jmi);

        locationEN_jmi.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Item"));
        location_jm.add(locationEN_jmi);

        settings_jm.add(location_jm);

        menubar_jmb.add(settings_jm);

        blackList_jm.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Black_List"));
        addBlackList_jmi.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Item"));
        blackList_jm.add(addBlackList_jmi);

        removeBlackList_jmi.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Item"));
        blackList_jm.add(removeBlackList_jmi);

        resetBlackList_jmi.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Item"));
        blackList_jm.add(resetBlackList_jmi);

        menubar_jmb.add(blackList_jm);

        exit_jm.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Exit"));
        exit_jm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit_jmActionPerformed(evt);
            }
        });

        exit_jmi.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Exit"));
        exit_jmi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit_jmiActionPerformed(evt);
            }
        });

        exit_jm.add(exit_jmi);

        menubar_jmb.add(exit_jm);

        credits_jm.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("Credits"));
        credits_jm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                credits_jmActionPerformed(evt);
            }
        });

        credits_jmi.setText(java.util.ResourceBundle.getBundle("citar/diablu/server/model/i18n/diABluServerDefaultBundle").getString("About"));
        credits_jmi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                credits_jmiActionPerformed(evt);
            }
        });

        credits_jm.add(credits_jmi);

        menubar_jmb.add(credits_jm);

        setJMenuBar(menubar_jmb);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(AllPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 695, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(AllPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                .add(20, 20, 20))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logDetail_jcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logDetail_jcbActionPerformed
        String logD = logDetail_jcb.getSelectedItem().toString();
        
        
        log(LOG_DEBUG,"[Controller]Log Detail changed into:"+logDetail);
        
        if (logD.equalsIgnoreCase("Simple")) {
            
            logDetail = LOG_SIMPLE;
            
        }else if (logD.equalsIgnoreCase("Detailed")) {
            
            logDetail = LOG_DETAILED;
            
        } else {
            
            logDetail = LOG_DEBUG;
            
        }
        
        // debug log
        log(LOG_DEBUG,"[Controller]New Log Detail code:"+logDetail);
        dController.newLogDetail(logDetail);
    }//GEN-LAST:event_logDetail_jcbActionPerformed

    private void saveLog_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveLog_jbActionPerformed
        log(LOG_DEBUG,"[Controller]Save Settings");
        dController.saveSettings();
    }//GEN-LAST:event_saveLog_jbActionPerformed

    private void clearLog_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearLog_jbActionPerformed
        dController.clearLog();
        log(LOG_DEBUG,"[Controller]Clear Log");
    }//GEN-LAST:event_clearLog_jbActionPerformed

    private void port_jtfPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_port_jtfPropertyChange
        String tempP = port_jtf.getText();
        log(LOG_DEBUG,"[Controller]Target Port changed into:"+tempP);
        dController.newPort(tempP);
    }//GEN-LAST:event_port_jtfPropertyChange

    private void address_jtfPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_address_jtfPropertyChange
        String tempA = address_jtf.getText();
        log(LOG_DEBUG,"[Controller]Target Address changed into:"+tempA);
        dController.newTargetAddress(tempA);
    }//GEN-LAST:event_address_jtfPropertyChange

    private void serviceDescription_jtfPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_serviceDescription_jtfPropertyChange
        String tempS = serviceDescription_jtf.getText();
        log(LOG_DEBUG,"[Controller]New Service Descritption:"+tempS);
        dController.newServiceDescription(tempS);
    }//GEN-LAST:event_serviceDescription_jtfPropertyChange

    private void service_jtfPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_service_jtfPropertyChange
        String tempS = service_jtf.getText();
        log(LOG_DEBUG,"[Controller]New Service Name:"+tempS);
        dController.newServiceName(tempS);
    }//GEN-LAST:event_service_jtfPropertyChange

    private void delay_jtfPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_delay_jtfPropertyChange
        
        int btDelay = BT_DEFAULT_DELAY;
        
        try {
            
            btDelay = new Integer("").parseInt(delay_jtf.getText());
            
        } catch (Exception e){
            
            log(LOG_INPUT_ERROR,"Please insert a valid number."+"[Default]:"+btDelay+" ms instead");
            
            // we will use the default value instead
            
        }
        
        log(LOG_DEBUG,"[Controller]Setting new BT delay:"+btDelay);
        dController.newBluetoothDelay(btDelay);
    }//GEN-LAST:event_delay_jtfPropertyChange

    private void exit_jmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit_jmActionPerformed
        log(LOG_DEBUG,"[Controller]Exit the DiABlu System");
        dController.exit();
    }//GEN-LAST:event_exit_jmActionPerformed

    private void exit_jmiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit_jmiActionPerformed
// TODO:remove this method
    }//GEN-LAST:event_exit_jmiActionPerformed

    private void credits_jmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_credits_jmActionPerformed
        
        log(LOG_DEBUG,"[Controller]Show Credits");
        dController.showCredits();
        
    }//GEN-LAST:event_credits_jmActionPerformed

    private void credits_jmiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_credits_jmiActionPerformed
// TODO add your handling code here:
        // TODO: remove this method
    }//GEN-LAST:event_credits_jmiActionPerformed
    
    // simplify code method
    private void log(int priority,String logMsg){
        
        dController.log(priority,logMsg);
        
    }
    
    /**
     * @param args the command line arguments
     *
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DiABluServerCompactView().setVisible(true);
            }
        });
    }
    */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane AllPane;
    private javax.swing.JMenuItem addBlackList_jmi;
    private javax.swing.JTextField address_jtf;
    private javax.swing.JLabel adress_jl;
    private javax.swing.JMenu blackList_jm;
    private javax.swing.JButton clearLog_jb;
    private javax.swing.JMenu credits_jm;
    private javax.swing.JMenuItem credits_jmi;
    private javax.swing.JLabel delay_jl;
    private javax.swing.JTextField delay_jtf;
    private javax.swing.JTable detectedTable_jt;
    private javax.swing.JPanel detected_jp;
    private javax.swing.JScrollPane detected_jsp;
    private javax.swing.JMenu exit_jm;
    private javax.swing.JMenuItem exit_jmi;
    private javax.swing.JMenuItem languageEN_jmi;
    private javax.swing.JMenuItem languageFR_jmi;
    private javax.swing.JMenuItem languagePT_jmi;
    private javax.swing.JMenu language_jm;
    private javax.swing.JMenuItem loadSettings_jmi;
    private javax.swing.JMenuItem locationEN_jmi;
    private javax.swing.JMenuItem locationFR_jmi;
    private javax.swing.JMenuItem locationPT_jmi;
    private javax.swing.JMenu location_jm;
    private javax.swing.JComboBox logDetail_jcb;
    private javax.swing.JLabel logDetail_jl;
    private javax.swing.JPanel log_jp;
    private javax.swing.JScrollPane log_jsp;
    private javax.swing.JTextArea log_jta;
    private javax.swing.JMenuBar menubar_jmb;
    private javax.swing.JPanel output_jp;
    private javax.swing.JLabel port_jl;
    private javax.swing.JTextField port_jtf;
    private javax.swing.JMenuItem removeBlackList_jmi;
    private javax.swing.JMenuItem resetBlackList_jmi;
    private javax.swing.JButton saveLog_jb;
    private javax.swing.JMenuItem saveSettings_jmi;
    private javax.swing.JLabel serviceDescription_jl;
    public javax.swing.JTextField serviceDescription_jtf;
    private javax.swing.JLabel service_jl;
    private javax.swing.JTextField service_jtf;
    private javax.swing.JMenu settings_jm;
    private javax.swing.JPanel settings_jp;
    private javax.swing.JLabel vCycles_jl;
    private javax.swing.JTextField vCycles_jtf;
    // End of variables declaration//GEN-END:variables
    
}
