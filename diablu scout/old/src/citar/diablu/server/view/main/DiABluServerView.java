/*
 * DiABluServerView.java
 *
 * Created on 11 août 2006, 18:22
 */

package citar.diablu.server.view.main;

// J2SE Classes
import java.util.Vector;

// j2se 1.5 - DiABlu System Constants
import static citar.diablu.server.model.settings.DiABluServerCONSTANTS.*;

// i18n & l9n
import java.util.ResourceBundle;

// Swing
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;

/*
 * ALL DiABlu Data Classes
 */
import citar.diablu.server.model.data.*;

// model
import citar.diablu.server.controller.out.view.DiABluServerViewModelListener;
// controller
import citar.diablu.server.controller.in.view.DiABluServerViewControllerListener;

/**
 *
 * @author  nrodrigues
 */
public class DiABluServerView extends javax.swing.JFrame implements DiABluServerViewModelListener {
    
    // our controller interface
    private DiABluServerViewControllerListener dController = null;
    
    // Log Detail
    private int logDetail = LOG_SIMPLE;
    
    // i18n resource bundle
    ResourceBundle viewBundle;
    
    /** Creates new form DiABluServerView */
    public DiABluServerView(DiABluServerViewControllerListener dC) {
        
        System.out.println("Starting View...");
        this.dController = dC;
        System.out.println("Starting components...");
        initComponents();
        System.out.println("DiABlu Server View:READY...waiting model...");
        //setVisible(true);
        
    }
    
    /**
     *  View Methods
     *  GUI
     *
     */
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        view_bg = new javax.swing.ButtonGroup();
        detected_jp = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        detectedTable_jt = new javax.swing.JTable();
        settings_jp = new javax.swing.JPanel();
        saveSettings_jb = new javax.swing.JButton();
        input_jp = new javax.swing.JPanel();
        inputProtocol_jl = new javax.swing.JLabel();
        inputProtocol_jcb = new javax.swing.JComboBox();
        delay_jtf = new javax.swing.JTextField();
        delay_jl = new javax.swing.JLabel();
        service_jl = new javax.swing.JLabel();
        service_jtf = new javax.swing.JTextField();
        serviceDescription_jl = new javax.swing.JLabel();
        serviceDescription_jtf = new javax.swing.JTextField();
        vCycles_jl = new javax.swing.JLabel();
        vCycles_jtf = new javax.swing.JTextField();
        output_jp = new javax.swing.JPanel();
        protocol_jcb = new javax.swing.JComboBox();
        protocol_jl = new javax.swing.JLabel();
        address_jtf = new javax.swing.JTextField();
        adress_jl = new javax.swing.JLabel();
        port_jtf = new javax.swing.JTextField();
        port_jl = new javax.swing.JLabel();
        loadSettings_jb = new javax.swing.JButton();
        global_jp = new javax.swing.JPanel();
        location_jcb = new javax.swing.JComboBox();
        location_jl = new javax.swing.JLabel();
        language_jcb = new javax.swing.JComboBox();
        language_jl = new javax.swing.JLabel();
        simulator_jp = new javax.swing.JPanel();
        startSimulator_jb = new javax.swing.JButton();
        stopSimulator_jb = new javax.swing.JButton();
        simulatorAuto_jchb = new javax.swing.JCheckBox();
        blackList_jp = new javax.swing.JPanel();
        addBlackList_jb = new javax.swing.JButton();
        removeBlackList_jb = new javax.swing.JButton();
        resetBlackList_jb = new javax.swing.JButton();
        log_jp = new javax.swing.JPanel();
        log_jsp = new javax.swing.JScrollPane();
        log_jta = new javax.swing.JTextArea();
        clearLog_jb = new javax.swing.JButton();
        saveLog_jb = new javax.swing.JButton();
        logDetail_jl = new javax.swing.JLabel();
        logDetail_jcb = new javax.swing.JComboBox();
        menubar_jmb = new javax.swing.JMenuBar();
        view_jm = new javax.swing.JMenu();
        compactView_jmi = new javax.swing.JMenuItem();
        about_jm = new javax.swing.JMenu();
        credits_jmi = new javax.swing.JMenuItem();
        exit_jm = new javax.swing.JMenu();
        exit_jmi = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DiABlu Server 2 Beta");
        detected_jp.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Detected Devices", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), java.awt.Color.blue));
        detectedTable_jt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UUID  ", "Friendly Name", "Device Type", "Status", "Last Msg", "Last Key"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        detectedTable_jt.getColumnModel().getColumn(0).setPreferredWidth(310);
        detectedTable_jt.getColumnModel().getColumn(1).setPreferredWidth(400);
        detectedTable_jt.getColumnModel().getColumn(2).setPreferredWidth(80);
        detectedTable_jt.getColumnModel().getColumn(3).setPreferredWidth(120);
        //detectedTable_jt.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //Ask to be notified of selection changes.
        ListSelectionModel rowSM = detectedTable_jt.getSelectionModel();
        rowSM.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                //Ignore extra messages.
                if (e.getValueIsAdjusting()) return;

                ListSelectionModel lsm =
                (ListSelectionModel)e.getSource();
                if (lsm.isSelectionEmpty()) {
                    //no rows are selected
                } else {
                    int selectedRow = lsm.getMinSelectionIndex();

                    //selectedRow is selected
                    String uuidT = detectedTable_jt.getValueAt(selectedRow,0).toString();
                    String fName = detectedTable_jt.getValueAt(selectedRow,1).toString();
                    DiABluID dId = new DiABluID(uuidT,fName);
                    dController.newSelectedDevice(dId);

                }
            }
        });
        jScrollPane1.setViewportView(detectedTable_jt);

        org.jdesktop.layout.GroupLayout detected_jpLayout = new org.jdesktop.layout.GroupLayout(detected_jp);
        detected_jp.setLayout(detected_jpLayout);
        detected_jpLayout.setHorizontalGroup(
            detected_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(detected_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 760, Short.MAX_VALUE)
                .addContainerGap())
        );
        detected_jpLayout.setVerticalGroup(
            detected_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(detected_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                .addContainerGap())
        );

        settings_jp.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Settings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), java.awt.Color.blue));
        saveSettings_jb.setText("Save");
        saveSettings_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSettings_jbActionPerformed(evt);
            }
        });

        input_jp.setBorder(javax.swing.BorderFactory.createTitledBorder("Input"));
        inputProtocol_jl.setText("Protocol:");

        inputProtocol_jcb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Bluetooth" }));
        inputProtocol_jcb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputProtocol_jcbActionPerformed(evt);
            }
        });

        delay_jtf.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        delay_jl.setText("Delay between bluetooth discoverys(ms):");

        service_jl.setText("Service Name:");

        serviceDescription_jl.setText("Service Description:");

        vCycles_jl.setText("Verify Cycles:");

        vCycles_jtf.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        org.jdesktop.layout.GroupLayout input_jpLayout = new org.jdesktop.layout.GroupLayout(input_jp);
        input_jp.setLayout(input_jpLayout);
        input_jpLayout.setHorizontalGroup(
            input_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(input_jpLayout.createSequentialGroup()
                .add(input_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(input_jpLayout.createSequentialGroup()
                        .add(serviceDescription_jl)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(serviceDescription_jtf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE))
                    .add(input_jpLayout.createSequentialGroup()
                        .add(inputProtocol_jl)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(inputProtocol_jcb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 83, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(vCycles_jl)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(vCycles_jtf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 50, Short.MAX_VALUE)
                        .add(delay_jl)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(delay_jtf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 46, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(input_jpLayout.createSequentialGroup()
                        .add(service_jl)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(service_jtf, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)))
                .addContainerGap())
        );
        input_jpLayout.setVerticalGroup(
            input_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(input_jpLayout.createSequentialGroup()
                .add(input_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(inputProtocol_jl)
                    .add(inputProtocol_jcb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(delay_jtf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(delay_jl)
                    .add(vCycles_jl)
                    .add(vCycles_jtf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(input_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(service_jl)
                    .add(service_jtf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(input_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(serviceDescription_jl)
                    .add(serviceDescription_jtf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        output_jp.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));
        protocol_jcb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "OSC" }));
        protocol_jcb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                protocol_jcbActionPerformed(evt);
            }
        });

        protocol_jl.setText("Protocol:");

        address_jtf.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        adress_jl.setText("Target Address:");

        port_jtf.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        port_jl.setText("Port:");

        org.jdesktop.layout.GroupLayout output_jpLayout = new org.jdesktop.layout.GroupLayout(output_jp);
        output_jp.setLayout(output_jpLayout);
        output_jpLayout.setHorizontalGroup(
            output_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(output_jpLayout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .add(output_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, port_jl)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, adress_jl)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, protocol_jl))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(output_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(port_jtf)
                    .add(address_jtf)
                    .add(protocol_jcb, 0, 76, Short.MAX_VALUE))
                .addContainerGap())
        );
        output_jpLayout.setVerticalGroup(
            output_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(output_jpLayout.createSequentialGroup()
                .add(output_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(protocol_jcb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(protocol_jl))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(output_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(adress_jl)
                    .add(address_jtf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(output_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(port_jl)
                    .add(port_jtf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        loadSettings_jb.setText("Load");
        loadSettings_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadSettings_jbActionPerformed(evt);
            }
        });

        global_jp.setBorder(javax.swing.BorderFactory.createTitledBorder("Global"));
        location_jcb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Portugal", "England", "France", "Deutchland" }));
        location_jcb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                location_jcbActionPerformed(evt);
            }
        });

        location_jl.setText("Location:");

        language_jcb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Portugu\u00eas", "English", "Fran\u00e7ais", "Deutch" }));
        language_jcb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                language_jcbActionPerformed(evt);
            }
        });
        language_jcb.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                language_jcbCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        language_jl.setText("Language:");

        org.jdesktop.layout.GroupLayout global_jpLayout = new org.jdesktop.layout.GroupLayout(global_jp);
        global_jp.setLayout(global_jpLayout);
        global_jpLayout.setHorizontalGroup(
            global_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(global_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(language_jl)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(language_jcb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 13, Short.MAX_VALUE)
                .add(location_jl)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(location_jcb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        global_jpLayout.setVerticalGroup(
            global_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, global_jpLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(global_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(language_jl)
                    .add(language_jcb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(location_jcb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(location_jl))
                .addContainerGap())
        );

        simulator_jp.setBorder(javax.swing.BorderFactory.createTitledBorder("Simulator"));
        startSimulator_jb.setText("Start");
        startSimulator_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startSimulator_jbActionPerformed(evt);
            }
        });

        stopSimulator_jb.setText("Stop");
        stopSimulator_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopSimulator_jbActionPerformed(evt);
            }
        });

        simulatorAuto_jchb.setSelected(true);
        simulatorAuto_jchb.setText("Auto");
        simulatorAuto_jchb.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        simulatorAuto_jchb.setMargin(new java.awt.Insets(0, 0, 0, 0));
        simulatorAuto_jchb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                simulatorAuto_jchbItemStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout simulator_jpLayout = new org.jdesktop.layout.GroupLayout(simulator_jp);
        simulator_jp.setLayout(simulator_jpLayout);
        simulator_jpLayout.setHorizontalGroup(
            simulator_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(simulator_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(simulatorAuto_jchb)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(startSimulator_jb)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(stopSimulator_jb)
                .addContainerGap(15, Short.MAX_VALUE))
        );
        simulator_jpLayout.setVerticalGroup(
            simulator_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, simulator_jpLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(simulator_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(simulatorAuto_jchb)
                    .add(startSimulator_jb)
                    .add(stopSimulator_jb))
                .addContainerGap())
        );

        blackList_jp.setBorder(javax.swing.BorderFactory.createTitledBorder("Black List"));
        addBlackList_jb.setText("Add");
        addBlackList_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBlackList_jbActionPerformed(evt);
            }
        });

        removeBlackList_jb.setText("Remove");
        removeBlackList_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBlackList_jbActionPerformed(evt);
            }
        });

        resetBlackList_jb.setText("Reset");
        resetBlackList_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBlackList_jbActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout blackList_jpLayout = new org.jdesktop.layout.GroupLayout(blackList_jp);
        blackList_jp.setLayout(blackList_jpLayout);
        blackList_jpLayout.setHorizontalGroup(
            blackList_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(blackList_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(addBlackList_jb)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(removeBlackList_jb)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(resetBlackList_jb)
                .addContainerGap(16, Short.MAX_VALUE))
        );
        blackList_jpLayout.setVerticalGroup(
            blackList_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, blackList_jpLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(blackList_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(addBlackList_jb)
                    .add(removeBlackList_jb)
                    .add(resetBlackList_jb))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout settings_jpLayout = new org.jdesktop.layout.GroupLayout(settings_jp);
        settings_jp.setLayout(settings_jpLayout);
        settings_jpLayout.setHorizontalGroup(
            settings_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(settings_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(settings_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(input_jp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(settings_jpLayout.createSequentialGroup()
                        .add(global_jp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(blackList_jp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(settings_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, settings_jpLayout.createSequentialGroup()
                        .add(loadSettings_jb)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(saveSettings_jb))
                    .add(output_jp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, simulator_jp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        settings_jpLayout.setVerticalGroup(
            settings_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(settings_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(settings_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(blackList_jp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(global_jp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(simulator_jp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(settings_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(settings_jpLayout.createSequentialGroup()
                        .add(output_jp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(settings_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(saveSettings_jb)
                            .add(loadSettings_jb)))
                    .add(input_jp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        log_jp.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Log", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), java.awt.Color.blue));
        log_jta.setColumns(20);
        log_jta.setRows(5);
        log_jsp.setViewportView(log_jta);

        clearLog_jb.setText("Clear ");
        clearLog_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearLog_jbActionPerformed(evt);
            }
        });

        saveLog_jb.setText("Save");
        saveLog_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveLog_jbActionPerformed(evt);
            }
        });

        logDetail_jl.setText("Log Detail:");

        logDetail_jcb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Simple", "Detailed", "Debug" }));
        logDetail_jcb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logDetail_jcbActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout log_jpLayout = new org.jdesktop.layout.GroupLayout(log_jp);
        log_jp.setLayout(log_jpLayout);
        log_jpLayout.setHorizontalGroup(
            log_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(log_jpLayout.createSequentialGroup()
                .addContainerGap()
                .add(log_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(log_jpLayout.createSequentialGroup()
                        .add(logDetail_jl)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(logDetail_jcb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 512, Short.MAX_VALUE)
                        .add(clearLog_jb)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(saveLog_jb))
                    .add(log_jsp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 760, Short.MAX_VALUE))
                .addContainerGap())
        );
        log_jpLayout.setVerticalGroup(
            log_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, log_jpLayout.createSequentialGroup()
                .add(log_jsp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(log_jpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(clearLog_jb)
                    .add(saveLog_jb)
                    .add(logDetail_jcb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(logDetail_jl))
                .addContainerGap())
        );

        view_jm.setText("View");
        compactView_jmi.setText("Compact");
        compactView_jmi.setSelected(true);
        compactView_jmi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compactView_jmiActionPerformed(evt);
            }
        });

        view_jm.add(compactView_jmi);

        menubar_jmb.add(view_jm);

        about_jm.setText("About");
        about_jm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                about_jmActionPerformed(evt);
            }
        });

        credits_jmi.setText("About");
        credits_jmi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                credits_jmiActionPerformed(evt);
            }
        });

        about_jm.add(credits_jmi);

        menubar_jmb.add(about_jm);

        exit_jm.setText("Exit");
        exit_jm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit_jmActionPerformed(evt);
            }
        });

        exit_jmi.setText("Exit DiABlu System");
        exit_jmi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit_jmiActionPerformed(evt);
            }
        });

        exit_jm.add(exit_jmi);

        menubar_jmb.add(exit_jm);

        setJMenuBar(menubar_jmb);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, detected_jp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, settings_jp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(log_jp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(detected_jp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(settings_jp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(log_jp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void compactView_jmiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compactView_jmiActionPerformed

       //TODO:inform the controller of the view change request
        
    }//GEN-LAST:event_compactView_jmiActionPerformed

    private void resetBlackList_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBlackList_jbActionPerformed
// TODO add your handling code here:
        dController.clearBlackList();
    }//GEN-LAST:event_resetBlackList_jbActionPerformed

    private void exit_jmiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit_jmiActionPerformed
    
        dController.log(LOG_DEBUG,"[Controller]Exit the DiABlu System 1");
        dController.exit();
        
    }//GEN-LAST:event_exit_jmiActionPerformed
 
 /** 
  *  View methods
  *  This are view methods to simplify the collect and conversion of the data
  */
   
       /**
     * This method returns the tablemodel index of the first device found
     * with the given uuid
     *
     */
    public int locateDevice(String targetUUID) {
        
        dController.log(LOG_DEBUG,"[VIEW|locateDevice()]Target uuid:"+targetUUID);
        int i;                                          // temporary counter                                    
        DefaultTableModel buffer = (DefaultTableModel) detectedTable_jt.getModel();    // our current data table        
        String tempUUID = "";                               // temporary uuid used to compare
        int top = buffer.getRowCount();                     // total of table rows
        
        // Check for an empty model
        if (top==0) return -1;
                    
        // get the first element
        //tempUUID = buffer.getValueAt(i,0).toString();
        
        // do a cicle until we find our target
        for (i=0;i<top;i++){
            tempUUID = buffer.getValueAt(i,0).toString();
            if (tempUUID.equalsIgnoreCase(targetUUID)) break;
        }
        
        //check our results
        if (i==top) {
            
            // element not found
            dController.log(LOG_DEBUG,"[VIEW-locateDevice()]Device:"+targetUUID+"not found");
            return -1;
        } else {
            
            // we've found a match, let's return the index
            dController.log(LOG_DEBUG,"[VIEW-locateDevice()]Device:"+targetUUID+"found at index:"+i);
            return i;
        }
        
    }   
    
    
    
    
    private void addDevice(DiABluDevice dd){
        
        dController.log(LOG_DEBUG,"[View]Adding device:"+dd.toString());
        
        // get the info on the device
        String uuidT = dd.getID().getUUID();
        String fnameT = dd.getID().getFName();
        String deviceT = dd.getStringDevice();
        String statusT = dd.getStringStatus();
        if (dd.getIsBlackListed()){ statusT="Black Listed"; }
                        
        dController.log(LOG_DEBUG,"[VIEW-addDevice()]FNAME:"+fnameT+"@"+uuidT+"|["+deviceT+"]"+"|>"+statusT);
        DefaultTableModel modelT = (DefaultTableModel) detectedTable_jt.getModel();
        
        modelT.addRow(new Object[] { uuidT, fnameT, deviceT, statusT, "", "" });
    
        detectedTable_jt.setModel( (TableModel) modelT ); 
        
    }
    
    private void editDevice(DiABluDevice dd){
        
        dController.log(LOG_DEBUG,"[View]Editing device:"+dd.toString());
        dController.log(LOG_DEBUG,"Locating device:"+dd.toString());
        
      
        int locatedRow = locateDevice(dd.getID().getUUID());
        
        // make sure i've got work to do'
        if (locatedRow!=-1) {
           
           dController.log(LOG_DEBUG,"Device located @"+locatedRow);
           // get the Device's info'
           Object fname0 = (Object) dd.getID().getFName();
           Object dtype0 = (Object) dd.getStringDevice();
           Object lastm0 = (Object) dd.getLastMessage();
           Object lastk0 = (Object) dd.getLastKey();
           
           // get & set the current tablemodel
           DefaultTableModel currentTable = (DefaultTableModel) detectedTable_jt.getModel();
           currentTable.setValueAt(fname0,locatedRow,1);
           currentTable.setValueAt(dtype0,locatedRow,2);
           currentTable.setValueAt(lastm0,locatedRow,3);
           currentTable.setValueAt(lastk0,locatedRow,4);
           
           // update the table
           detectedTable_jt.setModel( (TableModel) currentTable );  
           
        }
        dController.log(LOG_DEBUG,"Device not locatized!");
        
        
        
    }
    
    private void removeDevice(DiABluID dd){
        
        dController.log(LOG_DEBUG,"[View]Removing device:"+dd.toString());
       
     
        DefaultTableModel currentTable = (DefaultTableModel)          // get our current data table
                                         detectedTable_jt.getModel();  
        
        int locatedRow = locateDevice(dd.getUUID());
            
        // if We've found a match let's remove the device            
        if (locatedRow!=-1) {
                
                dController.log(LOG_DEBUG,"[View]Found device @"+locatedRow); 
                // remove the row
                currentTable.removeRow(locatedRow);    
                // update the table
                detectedTable_jt.setModel( (TableModel) currentTable );
                
          } else {
            
             dController.log(LOG_DEBUG,"Couldn't remove:"+dd.toString());
            
          }
      
    }
    
    private int locateDevice(DiABluID dId){
        
        dController.log(LOG_DEBUG,"Trying to locate:"+dId.toString());
        dController.log(LOG_DEBUG,"[View]Code in progress");
        return 0;
        
    }
    
    /**
     *  This method returns the selected device ID
     *
     */
    private DiABluID getSelectedDiABluID(){
        
         // get our table data
         int selectedRow = detectedTable_jt.getSelectedRow();
         // no row selected   
         if (selectedRow == -1){
             
             log(LOG_INPUT_ERROR,"You have to select a device first");
             return new DiABluID();
             
         }
         
         String uuidT = detectedTable_jt.getValueAt(selectedRow,0).toString();
         String fnameT = detectedTable_jt.getValueAt(selectedRow,1).toString();
         
         // construct the DiABluID
         DiABluID did = new DiABluID(uuidT,fnameT);
         
         return did;
         
    }

    /*
     * Controller Methods
     * These methods are called by the View section in order to fire the appropriatte forward action
     */
    private void removeBlackList_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBlackList_jbActionPerformed

        DiABluID dId = getSelectedDiABluID();
        if (!dId.getUUID().equalsIgnoreCase("")) {
            
            dController.removeFromBlackList(dId);
        
        }
        
    }//GEN-LAST:event_removeBlackList_jbActionPerformed

    private void addBlackList_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBlackList_jbActionPerformed


        DiABluID dId = getSelectedDiABluID();

        // paranoid check
        if (!dId.getUUID().equalsIgnoreCase("")) {
            
            dController.log(LOG_DEBUG,"[Controller - addBlackList_] "+"Add to black list:"+dId.toString());
            dController.addToBlackList(dId);
        
        }
        
    }//GEN-LAST:event_addBlackList_jbActionPerformed

    private void logDetail_jcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logDetail_jcbActionPerformed

        
        String logD = logDetail_jcb.getSelectedItem().toString();
        
        
        dController.log(LOG_DEBUG,"[Controller]Log Detail changed into:"+logDetail);   
        
        if (logD.equalsIgnoreCase("Simple")) {
            
           logDetail = LOG_SIMPLE;
            
        }else if (logD.equalsIgnoreCase("Detailed")) {
            
            logDetail = LOG_DETAILED;
            
        } else {         
            
            logDetail = LOG_DEBUG;
            
        }
        
        // debug log
        dController.log(LOG_DEBUG,"[Controller]New Log Detail code:"+logDetail);   
        dController.newLogDetail(logDetail);
                      
    }//GEN-LAST:event_logDetail_jcbActionPerformed

    private void loadSettings_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadSettings_jbActionPerformed
        
        dController.log(LOG_DEBUG,"[Controller]Load Settings called");
        dController.loadSettings();
        
    }//GEN-LAST:event_loadSettings_jbActionPerformed

    private void protocol_jcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_protocol_jcbActionPerformed
          // TODO: in next version :)
    }//GEN-LAST:event_protocol_jcbActionPerformed

    private void inputProtocol_jcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputProtocol_jcbActionPerformed
        
        // TODO: in next version :)
        
    }//GEN-LAST:event_inputProtocol_jcbActionPerformed

    private void stopSimulator_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopSimulator_jbActionPerformed

        dController.log(LOG_DEBUG,"[Controller]Stop Simulator");
        dController.stopSimulator();
                
    }//GEN-LAST:event_stopSimulator_jbActionPerformed

    private void startSimulator_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSimulator_jbActionPerformed

        dController.log(LOG_DEBUG,"[Controller]Start Simulator");
        dController.startSimulator();
                
    }//GEN-LAST:event_startSimulator_jbActionPerformed

    private void simulatorAuto_jchbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_simulatorAuto_jchbItemStateChanged

        dController.log(LOG_DEBUG,"[Controller]Auto Simulator state changed");
        if (simulatorAuto_jchb.isSelected()) {
            
            dController.autoSimulator(true);
            
        } else {
            
            dController.autoSimulator(false);
            
        }
        
    }//GEN-LAST:event_simulatorAuto_jchbItemStateChanged

    private void location_jcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_location_jcbActionPerformed
       
        String loc = location_jcb.getSelectedItem().toString();
        
        dController.newCountry(loc);
        dController.log(LOG_DEBUG,"[Controller]New Location:"+loc);
        
    }//GEN-LAST:event_location_jcbActionPerformed

    private void language_jcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_language_jcbActionPerformed
    
        String lang = language_jcb.getSelectedItem().toString();
        String isoLang = "EN";
        
        if (lang.equalsIgnoreCase("Portugal")) { isoLang = "pt"; }
        if (lang.equalsIgnoreCase("England")) { isoLang = "en"; }
        // TODO: implement the full iso
        
        dController.newLanguage(isoLang);
        dController.log(LOG_DEBUG,"[Controller]New Language:"+isoLang);
        
    }//GEN-LAST:event_language_jcbActionPerformed

    private void language_jcbCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_language_jcbCaretPositionChanged
        
            // TODO: in next version :)
        
    }//GEN-LAST:event_language_jcbCaretPositionChanged

    private void saveLog_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveLog_jbActionPerformed
       
        dController.log(LOG_DEBUG,"[Controller]Save Settings");
        dController.saveSettings();
        
    }//GEN-LAST:event_saveLog_jbActionPerformed

    private void clearLog_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearLog_jbActionPerformed
        
        dController.clearLog();
        dController.log(LOG_DEBUG,"[Controller]Clear Log");
        
    }//GEN-LAST:event_clearLog_jbActionPerformed

    private void saveSettings_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSettings_jbActionPerformed
       
        dController.log(LOG_DEBUG,"[Controller]Save settings");
        dController.saveSettings();
        
    }//GEN-LAST:event_saveSettings_jbActionPerformed

    private void exit_jmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit_jmActionPerformed

        dController.log(LOG_DEBUG,"[Controller]Exit the DiABlu System");
        dController.exit();
        
    }//GEN-LAST:event_exit_jmActionPerformed

    private void about_jmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_about_jmActionPerformed

        dController.log(LOG_DEBUG,"[Controller]Show Credits");
        dController.showCredits();
        
    }//GEN-LAST:event_about_jmActionPerformed

    private void credits_jmiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_credits_jmiActionPerformed
// TODO add your handling code here:
        // TODO: remove this method
    }//GEN-LAST:event_credits_jmiActionPerformed
    
  
    
    /*
     * DiABlu Server Model Listener Interface Methods
     *
     */

    
    /* 
     * Detected table 
     */
    public void newDeviceList (Vector <DiABluDevice> dbList){
            
        dController.log(LOG_DETAILED,"[View]New device list arrived:"+dbList.size());
        
        // NOTHING TO DO HERE
        // For performance reasons it's better to update the table with more precise methods
        // like add,edit,remove instead of cleaning and creating an entire table again
           
    }     

         
    public void newDiABluDevices (Vector <DiABluDevice> dbList){
    
        // Paranoid check:        
        if (dbList == null) {
            
            dController.log(LOG_DEBUG,"[View]Trying to add a null list!");
            return;
        }
                
        dController.log(LOG_DETAILED,"[View]Adding "+dbList.size()+" devices");
        
        for (DiABluDevice iterator:dbList){
              addDevice(iterator);            
        }
       
    }
    
    public void editDiABluDevices (Vector <DiABluDevice> dbList){
    
        // Paranoid check:        
        if (dbList == null) {
            
            dController.log(LOG_DEBUG,"[View]Trying to edit a null list!");
            return;
        }
                
        dController.log(LOG_DETAILED,"[View]Editing "+dbList.size()+" devices");   
        
        for (DiABluDevice iterator:dbList){
              editDevice(iterator);            
        }
      
    }
    
    public void removeDiABluDevices (Vector <DiABluDevice> dbList){
    
       
        // Paranoid check:        
        if (dbList == null) {
            
            dController.log(LOG_DEBUG,"[View]Trying to remove a null list!");
            return;
        }
                
        dController.log(LOG_DETAILED,"[View]Removing "+dbList.size()+" devices");
        
        for (DiABluDevice iterator:dbList){
            
              removeDevice(iterator.getID());   
              
        }
        
        
    }
    
    public void newDeviceCount(int newDeviceCount){ 

        //NOTHING TO DO HERE  
        
    }
    
    public void newMsg (DiABluMsg newMsg){
    
        DiABluID dId = newMsg.getID();
        dController.log(LOG_DETAILED,"[View]New Msg:"+newMsg.getText()+"|From:"+dId.toString());
        
        // locate & update
        int index = locateDevice(dId);        
        if (index !=-1) {
            
            // we've found the device let's update the table model'
            DefaultTableModel buffer = (DefaultTableModel) detectedTable_jt.getModel();    // our current data table
            buffer.setValueAt(newMsg.getText(),index,3);
            
            // update the table
            detectedTable_jt.setModel( (TableModel) buffer );                                                                        
            return;
        }
        dController.log(LOG_DEBUG,"No device found for this msg");
        
        
    }
    
    public void newKey (DiABluKey newKey){
    
        DiABluID dId = newKey.getID();
        String keyText = newKey.toString();
        
        dController.log(LOG_DETAILED,"[View]New Key:"+keyText+"|From:"+dId.toString());
        
        int index = locateDevice(dId);
        if (index !=-1) {
            
            // we've found the device let's update the table model'
            DefaultTableModel buffer = (DefaultTableModel) detectedTable_jt.getModel();    // our current data table
            buffer.setValueAt(keyText,index,4);
            
            // update the table
            detectedTable_jt.setModel( (TableModel) buffer );
            return;
            
        }                
        dController.log(LOG_DEBUG,"No device found for this keys");
        
    }
    
    /* 
     * Settings
     */
    
    // Global
    public void setResourceBundle(ResourceBundle rb){
        
        this.viewBundle = rb;
        
    }       
    
    /**
     * This method sets the selected country in the combobox
     *
     */
    public void setCountry(String country){
        
        // TODO: Further refine this in order to get the countrys from xml configuration file
        int targetIndex = 0; 
        int totalAvaiableLocations = location_jcb.getItemCount();
        
        for ( int i=0; i<totalAvaiableLocations; i++ ){
        
            if (country.equalsIgnoreCase(location_jcb.getItemAt(i).toString())) { 
                targetIndex = i; 
                break;
            }
            
        }
        
        if ( location_jcb.getSelectedIndex() != targetIndex ) { 
            
            location_jcb.setSelectedIndex(targetIndex);
            
        }      
        
    }
    
    public void setLanguage(String language){
                   
      // TODO: Further refine this in order to get the countrys from xml configuration file
      int targetIndex = 0; 
      int totalAvaiableLanguages = language_jcb.getItemCount();
        
      for ( int i=0; i<totalAvaiableLanguages; i++ ){
        
          if (language.equalsIgnoreCase(language_jcb.getItemAt(i).toString())) { 
                targetIndex = i; 
                break;
          }
            
      }
        
      if ( language_jcb.getSelectedIndex() != targetIndex ) { 
            
            language_jcb.setSelectedIndex(targetIndex);
            
      }    
        
    }
    // Input
    // TODO:Multiple Protocol
    
    // Protocol Bluetooth
    public void setServiceName(String newServiceName){
        
        if (!this.service_jtf.getText().equalsIgnoreCase(newServiceName)){
    
            this.service_jtf.setText(newServiceName);
            
        }
        
    }
    
    public void setServiceDescription(String newServiceDesc){
    
        if (!this.serviceDescription_jtf.getText().equalsIgnoreCase(newServiceDesc)){
        
            this.serviceDescription_jtf.setText(newServiceDesc);
            
        }
        
        
    }
    
    public void setBluetoothDelay(int delay){
    
        String btDelay = Integer.toString(delay);
        if (!this.delay_jtf.getText().equalsIgnoreCase(btDelay)){
        
            this.delay_jtf.setText(btDelay);
            
        }
                
    }
    
    // Output
    // Protocol OpenSoundControl
    public void setTargetAddress(String targetURL){
        
        if (!this.address_jtf.getText().equalsIgnoreCase(targetURL)){
            
            this.address_jtf.setText(targetURL);
            
        }
    
    }
    
    public void setTargetPort(String targetPort){
        
       if (!this.port_jtf.getText().equalsIgnoreCase(targetPort)){
           
           this.port_jtf.setText(targetPort);
           
       }     
        
    }
    
    
    /*
     * Log
     *
     * For the time being we discard priority, but in future
     * we can use this value in order to give diferent appearance
     * to each, example: error messages in red.
     *
     */ 
    public void log(int priority,String log){
    
        
        // Check if this log is getting to big
        // TODO:Put a check for a configurable maximum size instead of this 1000
        // System.out.println("VIEW["+priority+"]:"+log);
        
        if (log_jta.getLineCount()>1000){
            log_jta.setText("");
        } 
    
        log_jta.append(log+"\n");
        
    }
    
    public void setLogDetail(int priority){
               
        String logDetail;
        
        // Paranoid check
        // TODO:Pass this validation to the model
        if ( priority > 2 ) { priority = 2; }
        
        if ( this.logDetail_jcb.getSelectedIndex() != priority ){
            
            logDetail_jcb.setSelectedIndex(priority);
            
        }
        
    }
    
    public void clearLog(){
    
        this.log_jta.setText("");
    
    }
    
    /*
     * Selected Device
     * Simulator 
     * This method is used only to update the simulator's view but could be used for a more complex view,etc
     */
    public void setSelectedDevice(DiABluID dd){
    
        // NOTHING TO DO HERE
    
    }
   
    public void setSimulatorAuto(boolean checkFlag){
                        
        simulatorAuto_jchb.setSelected(checkFlag);              
                        
    }
    
    public void simulatorIsRunning(boolean status){
        
        if (status){
            
            stopSimulator_jb.setEnabled(true);
            startSimulator_jb.setEnabled(false);
            
        } else {
            
            
            stopSimulator_jb.setEnabled(false);
            startSimulator_jb.setEnabled(true);
            
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu about_jm;
    private javax.swing.JButton addBlackList_jb;
    private javax.swing.JTextField address_jtf;
    private javax.swing.JLabel adress_jl;
    private javax.swing.JPanel blackList_jp;
    private javax.swing.JButton clearLog_jb;
    private javax.swing.JMenuItem compactView_jmi;
    private javax.swing.JMenuItem credits_jmi;
    private javax.swing.JLabel delay_jl;
    private javax.swing.JTextField delay_jtf;
    private javax.swing.JTable detectedTable_jt;
    private javax.swing.JPanel detected_jp;
    private javax.swing.JMenu exit_jm;
    private javax.swing.JMenuItem exit_jmi;
    private javax.swing.JPanel global_jp;
    private javax.swing.JComboBox inputProtocol_jcb;
    private javax.swing.JLabel inputProtocol_jl;
    private javax.swing.JPanel input_jp;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox language_jcb;
    private javax.swing.JLabel language_jl;
    private javax.swing.JButton loadSettings_jb;
    private javax.swing.JComboBox location_jcb;
    private javax.swing.JLabel location_jl;
    private javax.swing.JComboBox logDetail_jcb;
    private javax.swing.JLabel logDetail_jl;
    private javax.swing.JPanel log_jp;
    private javax.swing.JScrollPane log_jsp;
    private javax.swing.JTextArea log_jta;
    private javax.swing.JMenuBar menubar_jmb;
    private javax.swing.JPanel output_jp;
    private javax.swing.JLabel port_jl;
    private javax.swing.JTextField port_jtf;
    private javax.swing.JComboBox protocol_jcb;
    private javax.swing.JLabel protocol_jl;
    private javax.swing.JButton removeBlackList_jb;
    private javax.swing.JButton resetBlackList_jb;
    private javax.swing.JButton saveLog_jb;
    private javax.swing.JButton saveSettings_jb;
    private javax.swing.JLabel serviceDescription_jl;
    public javax.swing.JTextField serviceDescription_jtf;
    private javax.swing.JLabel service_jl;
    private javax.swing.JTextField service_jtf;
    private javax.swing.JPanel settings_jp;
    private javax.swing.JCheckBox simulatorAuto_jchb;
    private javax.swing.JPanel simulator_jp;
    private javax.swing.JButton startSimulator_jb;
    private javax.swing.JButton stopSimulator_jb;
    private javax.swing.JLabel vCycles_jl;
    private javax.swing.JTextField vCycles_jtf;
    private javax.swing.ButtonGroup view_bg;
    private javax.swing.JMenu view_jm;
    // End of variables declaration//GEN-END:variables
    
}
